---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: argocd-web-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    pref.argocd.argoproj.io/default-view: "network"
    pref.argocd.argoproj.io/default-pod-sort: "topLevelResource"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - argo_cd_hostname
              - argo_cd_oidc_provider
              - argo_cd_oidc_issuer
              - argo_cd_oidc_client_id
  template:
    metadata:
      name: argocd-helm
    spec:
      project: argo-cd
      destination:
        server: https://kubernetes.default.svc
        namespace: argocd
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
          - Retry=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: https://argoproj.github.io/argo-helm
        chart: argo-cd
        targetRevision: 5.43.3
        helm:
          releaseName: argo-cd
          values: |
            # -- Create aggregated roles that extend existing cluster roles to interact with argo-cd resources
            ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
            createAggregateRoles: false

            ## Globally shared configuration
            global:
              # -- Common labels for the all resources
              additionalLabels:
                argocd.argoproj.io/instance: argocd-helm

              # Default logging options used by all components
              logging:
                # -- Set the global logging format. Either: `text` or `json`
                format: text
                # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
                level: debug

              # -- Add Prometheus scrape annotations to all metrics services. This can be used as an alternative to the ServiceMonitors.
              addPrometheusAnnotations: false

              # -- Mapping between IP and hostnames that will be injected as entries in the pod's hosts files
              hostAliases: []
              # - ip: 10.20.30.40
              #   hostnames:
              #   - git.myhostname

              # Default network policy rules used by all components
              networkPolicy:
                # -- Create NetworkPolicy objects for all components
                create: true
                # -- Default deny all ingress traffic
                defaultDenyIngress: false

              # -- Default priority class for all components
              priorityClassName: ""

              # -- Default node selector for all components
              nodeSelector: {}

              # -- Default tolerations for all components
              tolerations: []

              # Default affinity preset for all components
              affinity:
                # -- Default pod anti-affinity rules. Either: `none`, `soft` or `hard`
                podAntiAffinity: soft
                # Node affinity rules
                nodeAffinity:
                  # -- Default node affinity rules. Either: `none`, `soft` or `hard`
                  type: hard
                  # -- Default match expressions for node affinity
                  matchExpressions: []
                    # - key: topology.kubernetes.io/zone
                    #   operator: In
                    #   values:
                    #    - antarctica-east1
                    #    - antarctica-west1

              # -- Default [TopologySpreadConstraints] rules for all components
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector of the component
              topologySpreadConstraints: []
                # - maxSkew: 1
                #   topologyKey: topology.kubernetes.io/zone
                #   whenUnsatisfiable: DoNotSchedule

              # -- Environment variables to pass to all deployed Deployments
              env: []

            ## Argo Configs
            configs:
              # General Argo CD configuration
              ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
              cm:
                # -- Create the argocd-cm configmap for [declarative setup]
                create: true

                # -- Annotations to be added to argocd-cm configmap
                annotations: {}

                # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
                url: ""

                # -- The name of tracking label used by Argo CD for resource pruning
                # @default -- Defaults to app.kubernetes.io/instance
                application.instanceLabelKey: argocd.argoproj.io/instance

                # -- Enable logs RBAC enforcement
                ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
                server.rbac.log.enforce.enable: false

                # -- Enable exec feature in Argo UI
                ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
                exec.enabled: false

                # -- Enable local admin user
                ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
                admin.enabled: true

                # -- Timeout to discover if a new manifests version got published to the repository
                timeout.reconciliation: 180s

                # -- Timeout to refresh application data as well as target manifests cache
                timeout.hard.reconciliation: 0s

                # OIDC configuration as an alternative to dex (optional).
                # to source a secret from somewhere else:
                # https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#example_1
                oidc.config: |
                  name: {{ .argo_cd_oidc_provider }}
                  issuer: {{ .argo_cd_oidc_issuer }}
                  clientID: {{ .argo_cd_oidc_client_id }}
                  clientSecret: $argocd-oidc-credentials:oidc.clientSecret
                  requestedScopes: ["openid", "profile", "email", "groups"]
                  requestedIDTokenClaims: {"groups": {"essential": true}}

              # Argo CD configuration parameters
              ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
              params:
                # -- Create the argocd-cmd-params-cm configmap
                # If false, it is expected the configmap will be created by something else.
                create: true

                ## Controller Properties
                # -- Number of application status processors
                controller.status.processors: 20
                # -- Number of application operation processors
                controller.operation.processors: 10
                # -- Specifies timeout between application self heal attempts
                controller.self.heal.timeout.seconds: 5
                # -- Repo server RPC call timeout seconds.
                controller.repo.server.timeout.seconds: 60

                ## Server properties
                # -- Run server without TLS
                server.insecure: false
                # -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /
                server.basehref: /
                # -- Used if Argo CD is running behind reverse proxy under subpath different from /
                server.rootpath: ''
                # -- Directory path that contains additional static assets
                server.staticassets: /shared/app
                # -- Disable Argo CD RBAC for user authentication
                server.disable.auth: false
                # -- Enable GZIP compression
                server.enable.gzip: false
                # -- Set X-Frame-Options header in HTTP responses to value. To disable, set to "".
                server.x.frame.options: sameorigin

                ## Repo-server properties
                # -- Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.
                reposerver.parallelism.limit: 0

                ## ApplicationSet Properties
                # -- Modify how application is synced between the generator and the cluster. One of: `sync`, `create-only`, `create-update`, `create-delete`
                applicationsetcontroller.policy: sync
                # -- Enables use of the Progressive Syncs capability
                applicationsetcontroller.enable.progressive.syncs: false

              # Argo CD RBAC policy configuration
              ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
              rbac:
                # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
                # If false, it is expected the configmap will be created by something else.
                # Argo CD will not work if there is no configmap created with the name above.
                create: true

                # -- Annotations to be added to argocd-rbac-cm configmap
                annotations: {}

                # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
                # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
                policy.default: ''

                # -- File containing user-defined policies and role definitions.
                # @default -- `''` (See [values.yaml])
                # policy.csv: ''
                # Policy rules are in the form:
                #  p, subject, resource, action, object, effect
                # Role definitions and bindings are in the form:
                #  g, subject, inherited-subject
                # policy.csv |
                #   p, role:org-admin, applications, *, */*, allow
                #   p, role:org-admin, clusters, get, *, allow
                #   p, role:org-admin, repositories, *, *, allow
                #   p, role:org-admin, logs, get, *, allow
                #   p, role:org-admin, exec, create, */*, allow
                #   g, your-github-org:your-team, role:org-admin
                policy.csv: |
                  g, ArgoCDAdmins, role:admin

                # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
                # The scope value can be a string, or a list of strings.
                scopes: "[groups]"

              # GnuPG public keys for commit verification
              ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/
              gpg:
                # -- Annotations to be added to argocd-gpg-keys-cm configmap
                annotations: {}

                # -- [GnuPG] public keys to add to the keyring
                # @default -- `{}` (See [values.yaml])
                ## Note: Public keys should be exported with `gpg --export --armor <KEY>`
                keys: {}
                  # 4AEE18F83AFDEB23: |
                  #   -----BEGIN PGP PUBLIC KEY BLOCK-----
                  #   ...
                  #   -----END PGP PUBLIC KEY BLOCK-----

              # SSH known hosts for Git repositories
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys
              ssh:
                # -- Annotations to be added to argocd-ssh-known-hosts-cm configmap
                annotations: {}

                # -- Known hosts to be added to the known host list by default.
                # @default -- See [values.yaml]
                knownHosts: |
                  [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
                  [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
                  [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
                  github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
                  github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
                  github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
                  gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
                  gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
                  gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9


              # ConfigMap for Config Management Plugins
              # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
              cmp:
                # -- Create the argocd-cmp-cm configmap
                create: false

              # -- Repositories list to be used by applications
              ## Creates a secret for each key/value specified below to create repositories
              ## Note: the last example in the list would use a repository credential template, configured under "configs.repositoryCredentials".
              repositories:
                small-hack-argocd:
                  url: https://github.com/small-hack/argocd-apps.git
                  name: small-hack
                  type: git

              # Argo CD sensitive data
              # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
              secret:
                # -- Create the argocd-secret
                createSecret: true

                # -- Shared secret for authenticating GitHub webhook events
                githubSecret: ""
                # -- Shared secret for authenticating GitLab webhook events
                gitlabSecret: ""

                # -- add additional secrets to be added to argocd-secret
                ## Custom secrets. Useful for injecting SSO secrets into environment variables.
                ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
                ## Note that all values must be non-empty.
                extra:
                  {}
                  # LDAP_PASSWORD: "mypassword"

              # -- Define custom [CSS styles] for your argo instance.
              # setting will automatically mount the provided CSS and reference it in the argo configuration.
              # @default -- `""` (See [values.yaml])
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/
              styles: |
               .nav-bar {
                 background: linear-gradient(to bottom, #999, #777, #333, #222, #111);
               }

            ## Application controller
            controller:
              ## Application controller Pod Disruption Budget
              ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              pdb:
                # -- Deploy a [PodDisruptionBudget] for the application controller
                enabled: false
                # -- Labels to be added to application controller pdb
                labels: {}
                # -- Annotations to be added to application controller pdb
                annotations: {}
                # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
                # @default -- `""` (defaults to 0 if not specified)
                minAvailable: ""
                # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
                ## Has higher precedence over `controller.pdb.minAvailable`
                maxUnavailable: ""

              ## Application controller metrics configuration
              metrics:
                # -- Deploy metrics service
                enabled: false
                applicationLabels:
                  # -- Enables additional labels in argocd_app_labels metric
                  enabled: false
                  # -- Additional labels
                  labels: []
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
                  clusterIP: ""
                  # -- Metrics service annotations
                  annotations: {}
                  # -- Metrics service labels
                  labels: {}
                  # -- Metrics service port
                  servicePort: 8082
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
                  # -- Prometheus ServiceMonitor interval
                  interval: 30s
                  # -- Prometheus [RelabelConfigs] to apply to samples before scraping
                  relabelings: []
                  # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
                  metricRelabelings: []
                  # -- Prometheus ServiceMonitor selector
                  selector: {}
                    # prometheus: kube-prometheus

                  # -- Prometheus ServiceMonitor scheme
                  scheme: ""
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: "" # "monitoring"
                  # -- Prometheus ServiceMonitor labels
                  additionalLabels: {}
                  # -- Prometheus ServiceMonitor annotations
                  annotations: {}

              ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
              ## Defaults to off
              clusterRoleRules:
                # -- Enable custom rules for the application controller's ClusterRole resource
                enabled: false
                # -- List of custom rules for the application controller's ClusterRole resource
                rules: []

            ## Dex
            dex:
              # -- Enable dex
              enabled: false

            ## Redis
            redis:
              # -- Enable redis
              enabled: true

              ## Prometheus redis-exporter sidecar
              exporter:
                # -- Enable Prometheus redis-exporter sidecar
                enabled: false

                # -- Redis exporter security context
                # @default -- See [values.yaml]
                containerSecurityContext:
                  runAsNonRoot: true
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                  seccompProfile:
                    type: RuntimeDefault
                  capabilities:
                    drop:
                      - ALL

                # -- Resource limits and requests for redis-exporter sidecar
                resources: {}
                  # limits:
                  #   cpu: 50m
                  #   memory: 64Mi
                  # requests:
                  #   cpu: 10m
                  #   memory: 32Mi


              # -- [Node selector]
              # @default -- `{}` (defaults to global.nodeSelector)
              nodeSelector: {}

              # -- [Tolerations] for use with node taints
              # @default -- `[]` (defaults to global.tolerations)
              tolerations: []

              # -- Assign custom [affinity] rules to the deployment
              # @default -- `{}` (defaults to global.affinity preset)
              affinity: {}

              # -- Assign custom [TopologySpreadConstraints] rules to redis
              # @default -- `[]` (defaults to global.topologySpreadConstraints)
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
              topologySpreadConstraints: []
                # - maxSkew: 1
                #   topologyKey: topology.kubernetes.io/zone
                #   whenUnsatisfiable: DoNotSchedule

              serviceAccount:
                # -- Create a service account for the redis pod
                create: false
                # -- Service account name for redis pod
                name: ""
                # -- Annotations applied to created service account
                annotations: {}
                # -- Automount API credentials for the Service Account
                automountServiceAccountToken: false

              metrics:
                # -- Deploy metrics service
                enabled: false

                # Redis metrics service configuration
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
                  clusterIP: None
                  # -- Metrics service annotations
                  annotations: {}
                  # -- Metrics service labels
                  labels: {}
                  # -- Metrics service port
                  servicePort: 9121
                  # -- Metrics service port name
                  portName: http-metrics

                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
                  # -- Interval at which metrics should be scraped
                  interval: 30s
                  # -- Prometheus [RelabelConfigs] to apply to samples before scraping
                  relabelings: []
                  # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
                  metricRelabelings: []
                  # -- Prometheus ServiceMonitor selector
                  selector: {}
                    # prometheus: kube-prometheus

                  # -- Prometheus ServiceMonitor scheme
                  scheme: ""
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: "" # "monitoring"
                  # -- Prometheus ServiceMonitor labels
                  additionalLabels: {}
                  # -- Prometheus ServiceMonitor annotations
                  annotations: {}

            # This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
            # the custom redis deployment is omitted
            # Check the redis-ha chart for more properties

            ## Server
            server:
              ## Argo CD server Horizontal Pod Autoscaler
              autoscaling:
                # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
                enabled: false
                # -- Minimum number of replicas for the Argo CD server [HPA]
                minReplicas: 1
                # -- Maximum number of replicas for the Argo CD server [HPA]
                maxReplicas: 5
                # -- Average CPU utilization percentage for the Argo CD server [HPA]
                targetCPUUtilizationPercentage: 50
                # -- Average memory utilization percentage for the Argo CD server [HPA]
                targetMemoryUtilizationPercentage: 50
                # -- Configures the scaling behavior of the target in both Up and Down directions.
                # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
                behavior: {}
                  # scaleDown:
                  #  stabilizationWindowSeconds: 300
                  #  policies:
                  #   - type: Pods
                  #     value: 1
                  #     periodSeconds: 180
                  # scaleUp:
                  #   stabilizationWindowSeconds: 300
                  #   policies:
                  #   - type: Pods
                  #     value: 2
                  #     periodSeconds: 60

              ## Argo CD server Pod Disruption Budget
              ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              pdb:
                # -- Deploy a [PodDisruptionBudget] for the Argo CD server
                enabled: false
                # -- Labels to be added to Argo CD server pdb
                labels: {}
                # -- Annotations to be added to Argo CD server pdb
                annotations: {}
                # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
                # @default -- `""` (defaults to 0 if not specified)
                minAvailable: ""
                # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
                ## Has higher precedence over `server.pdb.minAvailable`
                maxUnavailable: ""

              # -- Additional command line arguments to pass to Argo CD server
              extraArgs: []

              # -- Environment variables to pass to Argo CD server
              env: []

              # -- envFrom to pass to Argo CD server
              # @default -- `[]` (See [values.yaml])
              envFrom: []
              # - configMapRef:
              #     name: config-map-name
              # - secretRef:
              #     name: secret-name

              # -- Specify postStart and preStop lifecycle hooks for your argo-cd-server container
              lifecycle: {}

              ## Argo UI extensions
              ## This function in tech preview stage, do expect instability or breaking changes in newer versions.
              ## Ref: https://github.com/argoproj-labs/argocd-extensions
              extensions:
                # -- Enable support for Argo UI extensions
                enabled: false

              # -- Additional containers to be added to the server pod
              ## Note: Supports use of custom Helm templates
              extraContainers: []
              # - name: my-sidecar
              #   image: nginx:latest
              # - name: lemonldap-ng-controller
              #   image: lemonldapng/lemonldap-ng-controller:0.2.0
              #   args:
              #     - /lemonldap-ng-controller
              #     - --alsologtostderr
              #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
              #   env:
              #     - name: POD_NAME
              #       valueFrom:
              #         fieldRef:
              #           fieldPath: metadata.name
              #     - name: POD_NAMESPACE
              #       valueFrom:
              #         fieldRef:
              #           fieldPath: metadata.namespace
              #   volumeMounts:
              #   - name: copy-portal-skins
              #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins

              # -- Init containers to add to the server pod
              ## If your target Kubernetes cluster(s) require a custom credential (exec) plugin
              ## you could use this (and the same in the application controller pod) to provide such executable
              ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins
              initContainers: []
              #  - name: download-tools
              #    image: alpine:3
              #    command: [sh, -c]
              #    args:
              #      - wget -qO kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip &&
              #        unzip kubelogin.zip && mv bin/linux_amd64/kubelogin /custom-tools/
              #    volumeMounts:
              #      - mountPath: /custom-tools
              #        name: custom-tools

              # -- Additional volumeMounts to the server main container
              volumeMounts: []
              #  - mountPath: /usr/local/bin/kubelogin
              #    name: custom-tools
              #    subPath: kubelogin

              # -- Additional volumes to the server pod
              volumes: []
              #  - name: custom-tools
              #    emptyDir: {}

              # -- Annotations to be added to server Deployment
              deploymentAnnotations: {}

              # -- Annotations to be added to server pods
              podAnnotations: {}

              # -- Labels to be added to server pods
              podLabels: {}

              # -- Resource limits and requests for the Argo CD server
              resources: {}
              #  limits:
              #    cpu: 100m
              #    memory: 128Mi
              #  requests:
              #    cpu: 50m
              #    memory: 64Mi

              # Server container ports
              containerPorts:
                # -- Server container port
                server: 8080
                # -- Metrics container port
                metrics: 8083

              # -- Host Network for Server pods
              hostNetwork: false

              # -- [DNS configuration]
              dnsConfig: {}
              # -- Alternative DNS policy for Server pods
              dnsPolicy: "ClusterFirst"

              # -- Server container-level security context
              # @default -- See [values.yaml]
              containerSecurityContext:
                runAsNonRoot: true
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL

              # -- Priority class for the Argo CD server pods
              # @default -- `""` (defaults to global.priorityClassName)
              priorityClassName: ""

              # -- [Node selector]
              # @default -- `{}` (defaults to global.nodeSelector)
              nodeSelector: {}

              # -- [Tolerations] for use with node taints
              # @default -- `[]` (defaults to global.tolerations)
              tolerations: []

              # -- Assign custom [affinity] rules to the deployment
              # @default -- `{}` (defaults to global.affinity preset)
              affinity: {}

              # -- Assign custom [TopologySpreadConstraints] rules to the Argo CD server
              # @default -- `[]` (defaults to global.topologySpreadConstraints)
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
              topologySpreadConstraints: []
                # - maxSkew: 1
                #   topologyKey: topology.kubernetes.io/zone
                #   whenUnsatisfiable: DoNotSchedule

              ## Server metrics service configuration
              metrics:
                # -- Deploy metrics service
                enabled: false
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
                  clusterIP: ""
                  # -- Metrics service annotations
                  annotations: {}
                  # -- Metrics service labels
                  labels: {}
                  # -- Metrics service port
                  servicePort: 8083
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
                  # -- Prometheus ServiceMonitor interval
                  interval: 30s
                  # -- Prometheus [RelabelConfigs] to apply to samples before scraping
                  relabelings: []
                  # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
                  metricRelabelings: []
                  # -- Prometheus ServiceMonitor selector
                  selector: {}
                    # prometheus: kube-prometheus

                  # -- Prometheus ServiceMonitor scheme
                  scheme: ""
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: ""  # monitoring
                  # -- Prometheus ServiceMonitor labels
                  additionalLabels: {}
                  # -- Prometheus ServiceMonitor annotations
                  annotations: {}

              ingress:
                # -- Enable an ingress resource for the Argo CD server
                enabled: true
                # -- Additional ingress annotations
                annotations:
                  cert-manager.io/cluster-issuer: letsencrypt-prod
                  kubernetes.io/ingress.class: nginx
                  kubernetes.io/tls-acme: true
                  nginx.ingress.kubernetes.io/backend-protocol: HTTPS
                  nginx.ingress.kubernetes.io/ssl-passthrough: true
                # -- Additional ingress labels
                labels: {}
                # -- Defines which ingress controller will implement the resource
                # ingressClassName: "nginx"

                # -- List of ingress hosts
                ## Argo Ingress.
                ## Hostnames must be provided if Ingress is enabled.
                ## Secrets must be manually created in the namespace
                hosts:
                  - {{ .argo_cd_hostname }}

                # -- List of ingress paths
                paths:
                  - /
                # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
                pathType: Prefix

                # -- Ingress TLS configuration
                tls:
                  - secretName: argocd-secret
                    hosts:
                      - {{ .argo_cd_hostname }}

                # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
                https: true

              # dedicated ingress for gRPC as documented at
              # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/
              ingressGrpc:
                # -- Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]
                enabled: false
                # -- Setup up gRPC ingress to work with an AWS ALB
                isAWSALB: false
                # -- Additional ingress annotations for dedicated [gRPC-ingress]
                annotations: {}
                # -- Additional ingress labels for dedicated [gRPC-ingress]
                labels: {}
                # -- Defines which ingress controller will implement the resource [gRPC-ingress]
                ingressClassName: ""

                # -- List of ingress hosts for dedicated [gRPC-ingress]
                ## Argo Ingress.
                ## Hostnames must be provided if Ingress is enabled.
                ## Secrets must be manually created in the namespace
                ##
                hosts: []
                  # - argocd.example.com

                # -- List of ingress paths for dedicated [gRPC-ingress]
                paths:
                  - /
                # -- Ingress path type for dedicated [gRPC-ingress]. One of `Exact`, `Prefix` or `ImplementationSpecific`
                pathType: Prefix
                # -- Additional ingress paths for dedicated [gRPC-ingress]
                extraPaths: []
                  # - path: /*
                  #   pathType: Prefix
                  #   backend:
                  #     service:
                  #       name: ssl-redirect
                  #       port:
                  #         name: use-annotation

                # -- Ingress TLS configuration for dedicated [gRPC-ingress]
                tls: []
                  # - secretName: your-certificate-name
                  #   hosts:
                  #     - argocd.example.com

                # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
                https: false

            ## Repo Server
            repoServer:
              # -- Repo server name
              name: repo-server

              ## Repo server Horizontal Pod Autoscaler
              autoscaling:
                # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
                enabled: false
                # -- Minimum number of replicas for the repo server [HPA]
                minReplicas: 1
                # -- Maximum number of replicas for the repo server [HPA]
                maxReplicas: 5
                # -- Average CPU utilization percentage for the repo server [HPA]
                targetCPUUtilizationPercentage: 50
                # -- Average memory utilization percentage for the repo server [HPA]
                targetMemoryUtilizationPercentage: 50
                # -- Configures the scaling behavior of the target in both Up and Down directions.
                # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
                behavior: {}
                  # scaleDown:
                  #  stabilizationWindowSeconds: 300
                  #  policies:
                  #   - type: Pods
                  #     value: 1
                  #     periodSeconds: 180
                  # scaleUp:
                  #   stabilizationWindowSeconds: 300
                  #   policies:
                  #   - type: Pods
                  #     value: 2
                  #     periodSeconds: 60

              ## Repo server Pod Disruption Budget
              ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              pdb:
                # -- Deploy a [PodDisruptionBudget] for the repo server
                enabled: false
                # -- Labels to be added to repo server pdb
                labels: {}
                # -- Annotations to be added to repo server pdb
                annotations: {}
                # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
                # @default -- `""` (defaults to 0 if not specified)
                minAvailable: ""
                # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
                ## Has higher precedence over `repoServer.pdb.minAvailable`
                maxUnavailable: ""

              ## Repo server image
              image:
                # -- Repository to use for the repo server
                # @default -- `""` (defaults to global.image.repository)
                repository: ""
                # -- Tag to use for the repo server
                # @default -- `""` (defaults to global.image.tag)
                tag: ""
                # -- Image pull policy for the repo server
                # @default -- `""` (defaults to global.image.imagePullPolicy)
                imagePullPolicy: ""

              # -- Secrets with credentials to pull images from a private registry
              # @default -- `[]` (defaults to global.imagePullSecrets)
              imagePullSecrets: []

              # -- Additional command line arguments to pass to repo server
              extraArgs: []

              # -- Environment variables to pass to repo server
              env: []

              # -- envFrom to pass to repo server
              # @default -- `[]` (See [values.yaml])
              envFrom: []
              # - configMapRef:
              #     name: config-map-name
              # - secretRef:
              #     name: secret-name

              # -- Specify postStart and preStop lifecycle hooks for your argo-repo-server container
              lifecycle: {}

              # -- Init containers to add to the repo server pods
              initContainers: []

              # -- Additional containers to be added to the repo server pod
              ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/
              ## Note: Supports use of custom Helm templates
              extraContainers: []

              # -- Additional volumeMounts to the repo server main container
              volumeMounts: []

              # -- Additional volumes to the repo server pod
              volumes: []

              # -- Annotations to be added to repo server Deployment
              deploymentAnnotations: {}

              # -- Annotations to be added to repo server pods
              podAnnotations: {}

              # -- Labels to be added to repo server pods
              podLabels: {}

              # -- Resource limits and requests for the repo server pods
              resources: {}
              #  limits:
              #    cpu: 50m
              #    memory: 128Mi
              #  requests:
              #    cpu: 10m
              #    memory: 64Mi

              # -- Host Network for Repo server pods
              hostNetwork: false

              # -- [Node selector]
              # @default -- `{}` (defaults to global.nodeSelector)
              nodeSelector: {}

              # -- [Tolerations] for use with node taints
              # @default -- `[]` (defaults to global.tolerations)
              tolerations: []

              # -- Assign custom [affinity] rules to the deployment
              # @default -- `{}` (defaults to global.affinity preset)
              affinity: {}

              # -- Assign custom [TopologySpreadConstraints] rules to the repo server
              # @default -- `[]` (defaults to global.topologySpreadConstraints)
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
              topologySpreadConstraints: []
                # - maxSkew: 1
                #   topologyKey: topology.kubernetes.io/zone
                #   whenUnsatisfiable: DoNotSchedule

              # -- Deployment strategy to be added to the repo server Deployment
              deploymentStrategy: {}
                # type: RollingUpdate
                # rollingUpdate:
                #   maxSurge: 25%
                #   maxUnavailable: 25%

              # -- Priority class for the repo server pods
              # @default -- `""` (defaults to global.priorityClassName)
              priorityClassName: ""

              # TLS certificate configuration via Secret
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server
              ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.
              certificateSecret:
                # -- Create argocd-repo-server-tls secret
                enabled: false
                # -- Annotations to be added to argocd-repo-server-tls secret
                annotations: {}
                # -- Labels to be added to argocd-repo-server-tls secret
                labels: {}
                # -- Certificate authority. Required for self-signed certificates.
                ca: ''
                # -- Certificate private key
                key: ''
                # -- Certificate data. Must contain SANs of Repo service (ie: argocd-repo-server, argocd-repo-server.argo-cd.svc)
                crt: ''

              ## Repo server service configuration
              service:
                # -- Repo server service annotations
                annotations: {}
                # -- Repo server service labels
                labels: {}
                # -- Repo server service port
                port: 8081
                # -- Repo server service port name
                portName: https-repo-server

              ## Repo server metrics service configuration
              metrics:
                # -- Deploy metrics service
                enabled: true
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
                  clusterIP: ""
                  # -- Metrics service annotations
                  annotations: {}
                  # -- Metrics service labels
                  labels: {}
                  # -- Metrics service port
                  servicePort: 8084
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false
                  # -- Prometheus ServiceMonitor interval
                  interval: 30s
                  # -- Prometheus [RelabelConfigs] to apply to samples before scraping
                  relabelings: []
                  # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
                  metricRelabelings: []
                  # -- Prometheus ServiceMonitor selector
                  selector: {}
                    # prometheus: kube-prometheus

                  # -- Prometheus ServiceMonitor scheme
                  scheme: ""
                  # -- Prometheus ServiceMonitor tlsConfig
                  tlsConfig: {}
                  # -- Prometheus ServiceMonitor namespace
                  namespace: "" # "monitoring"
                  # -- Prometheus ServiceMonitor labels
                  additionalLabels: {}
                  # -- Prometheus ServiceMonitor annotations
                  annotations: {}

              ## Enable Custom Rules for the Repo server's Cluster Role resource
              ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
              ## Defaults to off
              clusterRoleRules:
                # -- Enable custom rules for the Repo server's Cluster Role resource
                enabled: false
                # -- List of custom rules for the Repo server's Cluster Role resource
                rules: []

              # -- Repo server rbac rules
              rbac: []
              #   - apiGroups:
              #     - argoproj.io
              #     resources:
              #     - applications
              #     verbs:
              #     - get
              #     - list
              #     - watch

            ## ApplicationSet controller
            applicationSet:
              # -- Enable ApplicationSet controller
              enabled: true

              ## ApplicationSet controller Pod Disruption Budget
              ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              pdb:
                # -- Deploy a [PodDisruptionBudget] for the ApplicationSet controller
                enabled: false
                # -- Labels to be added to ApplicationSet controller pdb
                labels: {}
                # -- Annotations to be added to ApplicationSet controller pdb
                annotations: {}
                # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
                # @default -- `""` (defaults to 0 if not specified)
                minAvailable: ""
                # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
                ## Has higher precedence over `applicationSet.pdb.minAvailable`
                maxUnavailable: ""

              # -- Additional containers to be added to the ApplicationSet controller pod
              ## Note: Supports use of custom Helm templates
              extraContainers: []

              # -- Init containers to add to the ApplicationSet controller pod
              ## Note: Supports use of custom Helm templates
              initContainers: []

              # -- List of extra mounts to add (normally used with extraVolumes)
              extraVolumeMounts: []

              # -- List of extra volumes to add
              extraVolumes: []

              ## Metrics service configuration
              metrics:
                # -- Deploy metrics service
                enabled: false
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false

              # -- Resource limits and requests for the ApplicationSet controller pods.
              resources: {}
                # limits:
                #   cpu: 100m
                #   memory: 128Mi
                # requests:
                #   cpu: 100m
                #   memory: 128Mi

              # -- [Node selector]
              # @default -- `{}` (defaults to global.nodeSelector)
              nodeSelector: {}

              # -- [Tolerations] for use with node taints
              # @default -- `[]` (defaults to global.tolerations)
              tolerations: []

              # -- Assign custom [affinity] rules
              # @default -- `{}` (defaults to global.affinity preset)
              affinity: {}

              # -- Assign custom [TopologySpreadConstraints] rules to the ApplicationSet controller
              # @default -- `[]` (defaults to global.topologySpreadConstraints)
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
              topologySpreadConstraints: []
                # - maxSkew: 1
                #   topologyKey: topology.kubernetes.io/zone
                #   whenUnsatisfiable: DoNotSchedule

              # -- Priority class for the ApplicationSet controller pods
              # @default -- `""` (defaults to global.priorityClassName)
              priorityClassName: ""

              # TLS certificate configuration via cert-manager
              ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration
              certificate:
                # -- Deploy a Certificate resource (requires cert-manager)
                enabled: false
                # -- The name of the Secret that will be automatically created and managed by this Certificate resource
                secretName: argocd-application-controller-tls
                # -- Certificate primary domain (commonName)
                domain: argocd.example.com
                # -- Certificate Subject Alternate Names (SANs)
                additionalHosts: []
                # -- The requested 'duration' (i.e. lifetime) of the certificate.
                # @default -- `""` (defaults to 2160h = 90d if not specified)
                ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
                duration: ""
                # -- How long before the expiry a certificate should be renewed.
                # @default -- `""` (defaults to 360h = 15d if not specified)
                ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
                renewBefore: ""
                # Certificate issuer
                ## Ref: https://cert-manager.io/docs/concepts/issuer
                issuer:
                  # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
                  group: ""
                  # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
                  kind: ""
                  # -- Certificate issuer name. Eg. `letsencrypt`
                  name: ""
                # Private key of the certificate
                privateKey:
                  # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
                  rotationPolicy: Never
                  # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
                  encoding: PKCS1
                  # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
                  algorithm: RSA
                  # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
                  size: 2048

            ## Notifications controller
            notifications:
              # -- Enable notifications controller
              enabled: true

              # -- Notifications controller name string
              name: notifications-controller

              # -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates
              argocdUrl:

              ## Notifications controller Pod Disruption Budget
              ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
              pdb:
                # -- Deploy a [PodDisruptionBudget] for the notifications controller
                enabled: false
                # -- Labels to be added to notifications controller pdb
                labels: {}
                # -- Annotations to be added to notifications controller pdb
                annotations: {}
                # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
                # @default -- `""` (defaults to 0 if not specified)
                minAvailable: ""
                # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
                ## Has higher precedence over `notifications.pdb.minAvailable`
                maxUnavailable: ""

              # -- Notifications controller log format. Either `text` or `json`
              # @default -- `""` (defaults to global.logging.format)
              logFormat: ""
              # -- Notifications controller log level. One of: `debug`, `info`, `warn`, `error`
              # @default -- `""` (defaults to global.logging.level)
              logLevel: ""

              # -- Define user-defined context
              ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/#defining-user-defined-context
              context: {}
                # region: east
                # environmentName: staging

              metrics:
                # -- Enables prometheus metrics server
                enabled: false
                # -- Metrics port
                port: 9001
                service:
                  # -- Metrics service type
                  type: ClusterIP
                  # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
                  clusterIP: ""
                  # -- Metrics service annotations
                  annotations: {}
                  # -- Metrics service labels
                  labels: {}
                  # -- Metrics service port name
                  portName: http-metrics
                serviceMonitor:
                  # -- Enable a prometheus ServiceMonitor
                  enabled: false

              # -- Resource limits and requests for the notifications controller
              resources: {}
                # limits:
                #   cpu: 100m
                #   memory: 128Mi
                # requests:
                #   cpu: 100m
                #   memory: 128Mi

              # Notification controller container ports
              containerPorts:
                # -- Metrics container port
                metrics: 9001

              # -- [DNS configuration]
              dnsConfig: {}
              # -- Alternative DNS policy for notifications controller Pods
              dnsPolicy: "ClusterFirst"

              # -- Notification controller container-level security Context
              # @default -- See [values.yaml]
              containerSecurityContext:
                runAsNonRoot: true
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL

              # -- [Node selector]
              # @default -- `{}` (defaults to global.nodeSelector)
              nodeSelector: {}

              # -- [Tolerations] for use with node taints
              # @default -- `[]` (defaults to global.tolerations)
              tolerations: []

              # -- Assign custom [affinity] rules
              # @default -- `{}` (defaults to global.affinity preset)
              affinity: {}

              # -- Assign custom [TopologySpreadConstraints] rules to the application controller
              # @default -- `[]` (defaults to global.topologySpreadConstraints)
              ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
              ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
              topologySpreadConstraints: []

              # -- Deployment strategy to be added to the notifications controller Deployment
              deploymentStrategy:
                type: Recreate

              # -- Priority class for the notifications controller pods
              # @default -- `""` (defaults to global.priorityClassName)
              priorityClassName: ""

              cm:
                # -- Whether helm chart creates notifications controller config map
                create: true

              # -- Contains centrally managed global application subscriptions
              ## For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/
              subscriptions: []

              # -- The notification template is used to generate the notification content
              ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
              templates: {}

              # -- The trigger defines the condition when the notification should be sent
              ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
              triggers: {}
