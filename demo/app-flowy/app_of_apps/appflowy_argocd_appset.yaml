---
# webapp is deployed 2nd because we need secrets and persistent volumes up 1st
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: appflowy-web-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - appflowy_hostname
              - appflowy_admin_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: appflowy-web-app
      annotations:
        argocd.argoproj.io/sync-wave: "3"
    spec:
      project: appflowy
      destination:
        server: https://kubernetes.default.svc
        namespace: appflowy
      syncPolicy:
        syncOptions:
          - CreateNamespace=true
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        # repoURL: 'https://jessebot.github.io/appflowy-helm'
        # chart: appflowy
        # targetRevision: 0.1.0
        #
        # for testing the live repo
        repoURL: https://github.com/jessebot/appflowy-helm
        targetRevision: adding-initial-commit-of-helm-chart
        path: charts/appflowy/
        helm:
          values: |
            appflowy:
              # -- set environment
              environment: "production"
              gotrue:
                existingSecret: "appflowy-gotrue-credentials"
              s3:
                useMinio: true
                existingSecret: "appflowy-s3-credentials"
              rustLog: "info"

              adminFrontend:
                enabled: true
                image:
                  repository: appflowyinc/admin_frontend
                  pullPolicy: IfNotPresent
                  # ref: https://hub.docker.com/r/appflowyinc/admin_frontend/tags
                  tag: v0.0.1

                ingress:
                  enabled: true
                  className: "nginx"
                  annotations:
                    cert-manager.io/cluster-issuer: {{ .global_cluster_issuer }}
                  hosts:
                    - host: "{{ .appflowy_admin_hostname }}"
                      paths:
                        - path: /
                          pathType: ImplementationSpecific
                  tls:
                    - secretName: appflowy-admin-tls
                      hosts:
                        - {{ .appflowy_admin_hostname }}

            ingress:
              enabled: true 
              className: "nginx"
              annotations:
                cert-manager.io/cluster-issuer: {{ .global_cluster_issuer }}
                nginx.ingress.kubernetes.io/proxy-body-size: 2G
              hosts:
                - host: {{ .appflowy_hostname }}
                  paths:
                    - path: /
                      pathType: ImplementationSpecific
              tls:
                - secretName: appflowy-tls
                  hosts:
                    - "{{ .appflowy_hostname }}"
