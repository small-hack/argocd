---
# third sync wave because it has to be up after postgres
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: gotosocial-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "4"
spec:
  # enable go templating
  goTemplate: true
  # this generator allows us to values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - gotosocial_hostname
              - gotosocial_libretranslate_hostname
              - gotosocial_s3_endpoint
              - global_cluster_issuer
              - global_time_zone
  template:
    metadata:
      name: gotosocial-web-app
      annotations:
        argocd.argoproj.io/sync-wave: "4"
        argocd.argoproj.io/sync-options: ApplyOnly=true
    spec:
      project: gotosocial
      destination:
        server: https://kubernetes.default.svc
        namespace: gotosocial
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        # repoURL: 'charts.fsociety.social'
        # targetRevision: 0.5.1
        # chart: gotosocial
        repoURL: https://github.com/jessebot/charts-1
        path: charts/gotosocial/
        targetRevision: jessebot-changes
        helm:
          releaseName: gotosocial
          # https://github.com/0hlov3/charts/blob/main/charts/gotosocial/values.yaml
          valuesObject:
            fullnameOverride: gotosocial
            image:
              repository: superseriousbusiness/gotosocial

            ingress:
              enabled: true
              annotations:
                kubernetes.io/tls-acme: "true"
                cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                nginx.ingress.kubernetes.io/proxy-body-size: 12m
                nginx.ingress.kubernetes.io/server-snippet: |
                  location /livez {
                    return 404;
                  }
                  location /readyz {
                    return 404;
                  }
                  location /metrics {
                    return 404;
                  }
              className: nginx
              hosts:
                - host: '{{ .gotosocial_hostname }}'
                  paths:
                    - path: '/'
              tls:
                - secretName: gotosocial-tls
                  hosts:
                    - '{{ .gotosocial_hostname }}'

            # resource limits for gotosocial
            resources:
              limits:
                cpu: 1500m
                memory: 1Gi
              requests:
                cpu: 500m
                memory: 512Mi

            gotosocial:
              strategy:
                type: Recreate

              persistence:
                enabled: true
                existingClaim: "gotosocial"

              tmpfs:
                enabled: false
                size: "1Gi"

              config:
                applicationName: "gotosocial"
                host: "{{ .gotosocial_hostname }}"
                accountDomain: ""
                protocol: "https"
                bindAddress: "0.0.0.0"
                trustedProxies:
                  - "::1"
                  - "10.0.0.0/8"
                  - "172.16.0.0/12"
                  - "192.168.0.0/16"

                db: # general db config, for postgres or sqlite specific config scroll down.
                  maxOpenConnsMultiplier: "8"
                  cache:
                    memoryTarget: "100MiB"

                storage:
                  backend: "s3"
                  localBasePath: "/gotosocial/storage"

                  s3:
                   enabled: true
                   endpoint: "{{ .gotosocial_s3_endpoint }}"
                   proxy: false
                   useSSL: true
                   # accessKey: ""
                   # secretKey: ""
                   # If this is set, accessKey, secretKey will not take place
                   # Needs the S3_ACCESS_KEY_ID and S3_SECRET_ACCESS_KEY keys.
                   existingSecret: "gotosocial-s3-credentials"
                   bucket: "gotosocial"

                oidc:
                  enabled: false
                  idpName: ""
                  skipVerification: ""
                  oidcScopes:
                    - "openid"
                    - "email"
                    - "profile"
                    - "groups"
                  linkExisting: false
                  adminGroups: []
                  existingSecretName: "gotosocial-oidc-credentials"
                  existingSecretKeys:
                    issuer: "issuer"
                    clientID: "client_id"
                    clientSecret: "client_secret"

                smtp:
                  existingSecretName: "gotosocial-smtp-credentials"
                  existingSecretKeys:
                    username: "username"
                    password: "password"
                    port: "port"
                    host: "host"
                  from: "no-reply@{{ .gotosocial_hostname }}"
                  discloseRecipients: false

              extraConfig:
                logLevel: "info"
                metrics:
                  enabled: true
                  authEnabled: false
                  # authUsername: ""
                  # authPassword: ""

            externalPostgresql:
              enabled: true
              host: gotosocial-postgres-rw.gotosocial.svc
              port: "5432"
              database: gotosocial
              username: gotosocial
              existingSecret: "gotosocial-pgsql-credentials"
              existingSecretPasswordKey: postgresPassword
              sslmode: "verify-full"
              sslcert: "/etc/secrets/gotosocial/tls.crt"
              sslkey: "/etc/secrets/gotosocial/tls.key"
              sslrootcert: "/etc/secrets/ca/ca.crt"

            # https://github.com/bitnami/charts/tree/main/bitnami/postgresql#parameters
            postgresql:
              enabled: false

            service:
              type: ClusterIP
              port: 80

            externalAuth:
              oidc:
                enabled: false
              oauth_global:
                # -- Automatically redirect to OIDC, CAS or SAML, and don't use local account authentication when clicking on Sign-In
                omniauth_only: false

            # -- https://github.com/gotosocial/gotosocial/blob/main/Dockerfile#L75
            # if you manually change the UID/GID environment variables, ensure these values match:
            podSecurityContext:
              runAsUser: 991
              runAsGroup: 991
              fsGroup: 991

            securityContext: {}

            serviceAccount:
              # -- Specifies whether a service account should be created
              create: true
              # -- Annotations to add to the service account
              annotations: {}

            # -- timezone for all the pods
            timezone: '{{ .global_time_zone }}'
