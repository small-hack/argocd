# Source: peertube/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: peertube
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: peertube
  template:
    metadata:
      labels:
        app.kubernetes.io/name: peertube
    spec:
      containers:
        - name: peertube
          image: "docker.io/chocobozzz/peertube:production-bookworm"
          imagePullPolicy: IfNotPresent
          command:
            - gosu
            - peertube
            - npm
            - start
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
            - name: peertube
              containerPort: 9000
            - name: rtmp
              containerPort: 1935
          # livenessProbe:
          #   enabled: true
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   enabled: true
          #   httpGet:
          #     path: /
          #     port: http
          resources: {}
          env:
            - name: POSTGRES_USER
              value: "peertube"
            - name: POSTGRES_DB
              value: "peertube"
            - name: PEERTUBE_DB_HOSTNAME
              value: "peertube-postgres-rw"
            - name: PEERTUBE_DB_USERNAME
              value: "peertube"
            - name: PEERTUBE_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: peertube-pgsql-credentials
                  key: password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: peertube-pgsql-credentials
                  key: password
            - name: PEERTUBE_TRUST_PROXY
              value: '["10.0.0.0/8"]'
            - name: PEERTUBE_REDIS_HOSTNAME
              value: "valkey:6379"
            - name: PEERTUBE_REDIS_AUTH
              valueFrom:
                secretKeyRef:
                  name: peertube-valkey-credentials
                  key: valkey-password
            - name: PEERTUBE_WEBSERVER_HOSTNAME
              value: peertube.buildstar.online
            - name: PEERTUBE_WEBSERVER_PORT
              value: "80"
            - name: PEERTUBE_WEBSERVER_HTTPS
              value: "true"
            - name: PEERTUBE_SECRET
              valueFrom:
                secretKeyRef:
                  name: peertube-secret
                  key: password
            - name: PEERTUBE_ADMIN_EMAIL
              value: "admin@cloudydev.net"
          volumeMounts:
            - name: peertube-config
              mountPath: /config
            - name: peertube-data
              mountPath: /data
      volumes:
        - name: peertube-config
          persistentVolumeClaim:
            claimName: peertube-config
        - name: peertube-data
          persistentVolumeClaim:
            claimName: peertube-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    k8up.io/backup: "true"
  labels:
    app: peertube
  name: peertube-config
  namespace: peertube
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    k8up.io/backup: "true"
  labels:
    app: peertube
  name: peertube-data
  namespace: peertube
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path
---
kind: Service
apiVersion: v1
metadata:
  name: peertube
spec:
  selector:
    app: peertube
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http
    - protocol: TCP
      port: 25
      targetPort: 25
      name: smtp
    - protocol: TCP
      port: 9000
      targetPort: 9000
      name: peertube
    - protocol: TCP
      port: 1935
      targetPort: 1935
      name: rtmp
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: peertube
  labels:
    app: peertube
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - peertube.buildstar.online
      secretName: peertube-tls
  rules:
    - host: peertube.buildstar.online
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: peertube
                port:
                  number: 80


