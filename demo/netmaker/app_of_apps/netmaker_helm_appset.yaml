# webapp is deployed 2nd because we need secrets
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: netmaker-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - netmaker_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: netmaker-helm-chart
    spec:
      project: netmaker
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          selfHeal: true
      destination:
        server: https://kubernetes.default.svc
        namespace: netmaker
      source:
        repoURL: 'https://github.com/small-hack/netmaker-helm'
        targetRevision: fix/posgres
        path: charts/netmaker/
        helm:
          valuesObject:
            # Default values for netmaker.
            # This is a YAML-formatted file.
            # Declare variables to be passed into your templates.
            
            # -- number of netmaker server replicas to create
            replicas: 1
            
            image:
              # -- The image repo to pull Netmaker image from
              repository: gravitl/netmaker
            
            # -- override the name for netmaker objects
            nameOverride: ""
            
            # -- override the full name for netmaker objects
            fullnameOverride: ""
            
            serviceAccount:
              # -- Specifies whether a service account should be created
              create: true
              # -- Annotations to add to the service account
              annotations: {}
              # -- Name of SA to use. If not set and create is true, a name is generated using the fullname template
              name: ""
            
            # -- pod annotations to add
            podAnnotations: {}
            
            # -- pod security contect to add
            podSecurityContext: {}
            # fsGroup: 2000

            api:
              service:
                # -- type for netmaker server services
                type: ClusterIP
                # -- port for API service
                port: 8081
                # -- targetport for API service
                targetPort: 8081

              ingress:
                # -- attempts to configure ingress if true
                enabled: true
                # -- api (REST) route subdomain
                host: 'api.{{ .netmaker_hostname }}'
                # -- api ingress className
                className: "nginx"
                # -- annotations for the netmaker API ingress object
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                # -- ingress api tls list
                tls:
                  - secretName: netmaker-api-tls
                    hosts:
                      - 'api.{{ .netmaker_hostname }}'
            
            ui:
              # -- how many UI replicas to create
              replicas: 1
              service:
                # -- type for netmaker server services
                type: ClusterIP
                # -- port for UI service
                port: 80
                # -- target port for UI service
                targetport: 80
              ingress:
                # -- attempts to configure ingress if true
                enabled: true
                # -- hostname for mqtt ingress
                host: 'admin.{{ .netmaker_hostname }}'
                # -- UI ingress className
                className: "nginx"
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                  # -- Redirect http to https
                  # nginx.ingress.kubernetes.io/ssl-redirect: 'true'
                  # -- destination addr for route
                  # nginx.ingress.kubernetes.io/rewrite-target: /
                # -- ingress tls list
                tls:
                  - secretName: netmaker-ui-tls
                    hosts:
                      - 'admin.{{ .netmaker_hostname }}'
            
            mq:
              # -- how many MQTT replicas to create
              replicas: 1
              username: "netmaker"
              existingSecret: 'netmaker-pgsql-credentials'
              secretKey: "MQ_ADMIN_PASSWORD"
              persistence:
                existingClaim: "netmaker-mq-pvc"
              service:
                # -- type for netmaker server services
                type: ClusterIP
                # -- port for MQTT service
                port: 443
                # -- Target port for MQTT service
                targetPort: 8883
              ingress:
                # -- attempts to configure ingress if true
                enabled: true
                # -- hostname for mqtt ingress
                host: 'broker.{{ .netmaker_hostname }}'
                className: "nginx"
                # -- annotations for the mqtt ingress object
                annotations:
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                ## Redirect http to https
                # nginx.ingress.kubernetes.io/ssl-redirect: 'true'
                ## destination addr for route
                # nginx.ingress.kubernetes.io/rewrite-target: /
                # -- ingress tls list
                tls:
                  - secretName: netmaker-mqtt-tls
                    hosts:
                      - 'broker.{{ .netmaker_hostname }}'
            
            dns:
              # -- whether or not to deploy coredns
              enabled: false
            
            setIpForwarding:
              enabled: true
            
            wireguard:
              # -- whether or not to use WireGuard on server
              enabled: true
              service:
                annotations: {}
                type: NodePort
              # -- whether or not to use Kernel WG (should be false unless WireGuard is installed on hosts).
              kernel: true
              # -- max number of networks that Netmaker will support if running with WireGuard enabled
              networkLimit: 10
            
            postgresql:
              enabled: true
              auth:
                # -- postgres user to generate
                username: netmaker
                # -- postgress database
                database: netmaker
                # -- postgres pass to generate, ignored if existingSecret passed in
                # password: netmaker
                # -- postgress number of replicas to deploy
                existingSecret: netmaker-pgsql-credentials
                secretKeys:
                  userPasswordKey: SQL_PASS
                  adminPasswordKey: postgres_password
                replicaCount: 2
              volumePermissions:
                enabled: true
              primary:
                podAnnotations:
                  k8up.io/backupcommand: "sh -c 'PGDATABASE=\"$POSTGRES_DB\" PGUSER=\"$POSTGRES_USER\" PGPASSWORD=\"$POSTGRES_PASSWORD\" pg_dump --clean'"
                  k8up.io/file-extension: .sql
                pgHbaConfiguration: |-
                  local all all trust
                  host all all 127.0.0.1/32 md5
                  host all netmaker 10.0.0.0/8 md5
                # type database user cidr-address method
                # host all postgres 10.0.0.0/8 md5
                # alls traffic from everywhere
                # host all all 0.0.0.0/0 md5
                initdb:
                  scripts:
                    my_init_script.sql: |
                      ALTER DATABASE netmaker OWNER TO netmaker;
                      GRANT ALL PRIVILEGES ON DATABASE netmaker TO netmaker;
                      GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO netmaker;
                persistence:
                  enabled: true
                  existingClaim: netmaker-postgresql
            
            oauth:
              enabled: true
              existingSecret: netmaker-oauth-config
              secretKeys:
                clientID: clientId
                clientSecret: clientSecret
                issuer: authUrl
                frontendURL: frontendUrl
                serverHttpHost: serverHttpHost
                auth_provider: auth_provider
                serverBrokerEndpoint: serverBrokerEndpoint
