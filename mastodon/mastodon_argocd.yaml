---
# First sync wave done in parallel with creating secrets. Must be BEFORE
# mastodon so that mastodon persists it's data between upgrades. Sync policy
# is set to ApplyOutOfSyncOnly=true to create the volume initially only.
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mastodon-persistence
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  destination:
    server: "https://kubernetes.default.svc"
    namespace: mastodon
  source:
    repoURL: https://github.com/small-hack/argocd-apps.git
    path: mastodon/manifests/persistence/
  syncPolicy:
    syncOptions:
      - ApplyOutOfSyncOnly=true
    automated:
      selfHeal: true

---
# First sync wave because we need secrets for mastodon, so it has to be
# before mastodon so it has secrets for all its credentials.
# In a private repo right now while we figure out a custom argocd plugin
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mastodon-external-secrets
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  destination:
    server: "https://kubernetes.default.svc"
    namespace: mastodon
  source:
    repoURL: https://github.com/small-hack/vleermuis-external-secrets.git
    path: external_secrets/mastodon/
  syncPolicy:
    syncOptions:
      - Replace=true
    automated:
      prune: true
      selfHeal: true

---
# has to be after secrets, but before web-app
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mastodon-postgres
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  project: default
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: mastodon
  source:
    chart: postgresql
    repoURL: 'https://charts.bitnami.com/bitnami'
    targetRevision: 12.6.9
    helm:
      skipCrds: true
      values: |
        global:
          postgresql:
            auth:
              username: mastodon
              database: mastodon
              existingSecret: mastodon-pg-user-credentials
              secretKeys:
                userPasswordKey: password
                adminPasswordKey: postgresPassword
        volumePermissions:
          enabled: true
        primary:
          podAnnotations:
            k8up.io/backupcommand: "sh -c 'PGDATABASE=\"$POSTGRES_DB\" PGUSER=\"$POSTGRES_USER\" PGPASSWORD=\"$POSTGRES_PASSWORD\" pg_dump --clean'"
            k8up.io/file-extension: .sql
          pgHbaConfiguration: |-
            local all all trust
            host all all 127.0.0.1/32 md5
            host all mastodon 10.0.0.0/8 md5
          initdb:
            scripts:
              my_init_script.sql: |
                ALTER DATABASE mastodon OWNER TO mastodon;
                GRANT ALL PRIVILEGES ON DATABASE mastodon TO mastodon;
                GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO mastodon;
          persistence:
            enabled: true
            # Use an existing Persistent Volume Claim (must be created ahead of time)
            existingClaim: "mastodon-postgres"
        metrics:
          enabled: true
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - Replace=true
    automated:
      selfHeal: true
      prune: true

---
# has to be after secrets, but before web-app
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mastodon-redis
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  project: default
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: mastodon
  source:
    chart: redis
    repoURL: 'https://charts.bitnami.com/bitnami'
    targetRevision: 17.13.2
    helm:
      values: |
        replica:
          replicaCount: 1
        auth:
          # you can also specify the name of an existing Secret
          # with a key of redis-password set to the password you want
          existingSecret: "mastodon-redis-credentials"
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - Replace=true
    automated:
      selfHeal: true
      prune: true

---
# third sync wave because it has to be up after postgres
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mastodon-web-app
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  project: default
  sources:
    # forked from: https://github.com/mastodon/chart/tree/main
    - repoURL: 'https://jessebot.github.io/mastodon-helm-chart'
      chart: mastodon
      targetRevision: 4.1.0
      helm:
        valueFiles:
        - $values/mastodon/values.yaml
    # our values.yaml file locally
    - repoURL: 'https://github.com/small-hack/argocd-apps.git'
      targetRevision: main
      ref: values
  destination:
    server: "https://kubernetes.default.svc"
    namespace: mastodon
  syncPolicy:
    syncOptions:
      - Replace=true
    automated:
      prune: true
      selfHeal: true

# ---
# apiVersion: argoproj.io/v1alpha1
# kind: Application
# metadata:
#   name: mastodon-db-migrate-job
#   namespace: argocd
#   annotations:
#     argocd.argoproj.io/sync-wave: "4"
# spec:
#   project: default
#   destination:
#     server: "https://kubernetes.default.svc"
#     namespace: mastodon
#   source:
#     repoURL: https://github.com/small-hack/argocd-apps.git
#     path: mastodon/manifests/migrate-job/
#   syncPolicy:
#     syncOptions:
#       - Replace=true
#     automated:
#       prune: true
#       selfHeal: true
