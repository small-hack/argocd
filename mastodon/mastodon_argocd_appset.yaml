---
# third sync wave because it has to be up after postgres
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: mastodon-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            env_vars:
              - mastodon_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: mastodon-web-app
      annotations:
        argocd.argoproj.io/sync-wave: "2"
    spec:
      project: mastodon
      destination:
        server: https://kubernetes.default.svc
        namespace: mastodon
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: registry-1.docker.io
        chart: bitnamicharts/mastodon
        targetRevision: 3.0.5
        helm:
          releaseName: "mastodon"
          values: |
            ## String to fully override common.names.fullname
            fullnameOverride: "mastodon"

            ## [string] Default config for Mastodon in the form of environment variables
            defaultConfig: |
              LOCAL_DOMAIN: {{ .mastodon_hostname }}

            defaultSecret: |
              DB_USER: mastodon

            # name of an existing Secret with your extra config for Mastodon
            extraConfigExistingSecret: "mastodon-server-credentials"

            ## Enable the search engine (uses Elasticsearch under the hood)
            enableSearches: true

            ## Enable the S3 storage engine
            enableS3: true

            ## Force Mastodon's S3_PROTOCOL to be https (Useful when TLS is terminated using cert-manager/Ingress)
            forceHttpsS3Protocol: true

            ## Set Mastodon's STREAMING_API_BASE_URL to use secure websocket (wss:// instead of ws://)
            useSecureWebSocket: false

            ## Set this instance to advertise itself to the fediverse using HTTPS. should always be true.
            local_https: true

            ## The domain name used by accounts on this instance. Unless you're using
            ## webDomain, this value should be set to the URL at which your instance is hosted
            localDomain: {{ .mastodon_hostname }}

            smtp:
              ## SMTP port
              port: 587
              ## From address for sent emails
              from_address: "toots@{{ .mastodon_hostname }}"
              ## SMTP domain
              domain: {{ .mastodon_hostname }}
              ## Reply-To value for sent emails
              reply_to: "noreply@{{ .mastodon_hostname }}"
              ## SMTP delivery method
              delivery_method: smtp
              ## SMTP CA file location
              ca_file: /etc/ssl/certs/ca-certificates.crt
              ## OpenSSL verify mode, maybe this should be peer?
              openssl_verify_mode: none
              ## smtp.enable_starttls_auto Automatically enable StartTLS
              enable_starttls_auto: true
              ## smtp.tls SMTP TLS
              tls: true
              ## SMTP auth method (set to "none" to disable auth) default: plain
              auth_method: login
              ## Name of an existing secret resource containing the SMTP
              existingSecret: "mastodon-smtp-credentials"
              ## Name of the key for the SMTP login credential
              existingSecretLoginKey: "username"
              ## Name of the key for the SMTP password credential
              existingSecretPasswordKey: "password"

            ## @section Mastodon Web Parameters
            web:
              ## Number of Mastodon web replicas to deploy
              replicaCount: 1
              ## Mastodon web resource requests and limits
              ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
              resources:
                limits: {}
                requests: {}

              # Array with extra env variables to add to Mastodon web nodes
              extraEnvVars:
                # - name: LOCAL_DOMAIN
                #   value: {{ .mastodon_hostname }}
                - name: DEFAULT_LOCALE
                  value: en
                - name: MASTODON_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mastodon-admin-credentials
                      key: password
                - name: MASTODON_ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: mastodon-admin-credentials
                      key: username
                - name: MASTODON_ADMIN_EMAIL
                  valueFrom:
                    secretKeyRef:
                      name: mastodon-admin-credentials
                      key: email
                - name: SMTP_SERVER
                  valueFrom:
                    secretKeyRef:
                      name: mastodon-smtp-credentials
                      key: host
                - name: SMTP_PORT
                  value: 587
                - name: SMTP_FROM_ADDRESS
                  value: "toots@{{ .mastodon_hostname }}"
                - name: SMTP_DOMAIN
                  value: {{ .mastodon_hostname }}
                - name: SMTP_REPLY_TO
                  value: "noreply@{{ .mastodon_hostname }}"
                - name: SMTP_DELIVERY_METHOD
                  value: "smtp"
                - name: SMTP_CA_FILE
                  value: "/etc/ssl/certs/ca-certificates.crt"
                - name: SMTP_OPENSSL_VERIFY_MODE
                  value: "none"
                - name: SMTP_ENABLE_STARTTLS_AUTO
                  value: "true"
                - name: SMTP_TLS
                  value: "true"
                - name: SMTP_AUTH_METHOD
                  value: "login"
                - name: DB_NAME
                  value: mastodon
                - name: DB_HOST
                  value: mastodon-postgres
                - name: DB_PORT
                  value: 5432
                - name: S3_ENABLED
                  value: "true"
                - name: S3_HOSTNAME
                  value: "minio-mastodon"
                - name: S3_ENDPOINT
                  value: "https://minio-mastodon:443"
                - name: S3_BUCKET
                  value: "s3storage"
                - name: S3_REGION
                  value: "us-east-1"
                - name: S3_ALIAS_HOST
                  value: "{{ .mastodon_hostname }}/s3storage"
                - name: S3_PROTOCOL
                  value: "https"
                - name: ES_ENABLED
                  value: "true"
                - name: ES_HOST
                  value: "mastodon-elastic-search"
                - name: ES_PORT
                  value: "9200"
                - name: LOCAL_HTTPS
                  value: "true"
                - name: STREAMING_API_BASE_URL
                  value: "wss://{{ .mastodon_hostname }}"
                - name: REDIS_HOST
                  value: "mastodon-redis-master"
                - name: REDIS_PORT
                  value: "6379"
                - name: RAILS_ENV
                  value: "production"
                - name: NODE_ENV
                  value: "production"

            ## @section Mastodon Sidekiq Parameters
            sidekiq:
              ## Number of Mastodon sidekiq replicas to deploy
              replicaCount: 1
              ## Mastodon sidekiq resource requests and limits
              ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
              ## The resources limits for the Mastodon sidekiq containers
              resources:
                limits: {}
                requests: {}

            ## @section Mastodon Streaming Parameters
            streaming:
              ## Number of Mastodon streaming replicas to deploy
              replicaCount: 1
              ## Mastodon streaming resource requests and limits
              ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
              ## The resources limits for the Mastodon streaming containers
              resources:
                limits: {}
                requests: {}

            ## @section Mastodon Media Management Cronjob Parameters
            tootctlMediaManagement:
              ## Enable Cronjob to manage all media caches
              enabled: false
              ## Enable removing attachements
              removeAttachments: true
              ## Number of days old media attachments must be for removal
              removeAttachmentsDays: 30
              ## Enable removal of cached remote emoji files
              removeCustomEmoji: false
              ## Enable removal of cached preview cards
              removePreviewCards: false
              ## Number of days old preview cards must be for removal
              removePreviewCardsDays: 30
              ## Enable removal of cached remote avatar images
              removeAvatars: false
              ## Number of days old avatar images must be for removal
              removeAvatarsDays: 30
              ## Enable removal of cached profile header images
              removeHeaders: false
              ## Number of days old header images must be for removal
              removeHeadersDays: 30
              ## Enable removal of cached orphan files
              removeOrphans: false
              ## Enable removal of cached avatar and header when local users are following the accounts
              includeFollows: false
              ## Cron job schedule to run tootctl media commands
              cronSchedule: '14 3 * * *'
              ## Number of failed jobs to keep
              failedJobsHistoryLimit: 3
              ## Number of successful jobs to keep
              successfulJobsHistoryLimit: 3
              ## Concurrency Policy. Should be Allow, Forbid or Replace
              concurrencyPolicy: Allow

            ## @section Mastodon Migration job Parameters
            initJob:
              ## Execute rake assets:precompile as part of the job
              precompileAssets: true
              ## Execute rake db:migrate as part of the job
              migrateDB: true
              ## Execute rake chewy:upgrade as part of the job
              migrateElasticsearch: true
              ## Create admin user as part of the job
              createAdmin: true
              ## set backoff limit of the job
              backoffLimit: 10
              ## Array containing extra env vars to configure the Mastodon init job
              extraEnvVars: []
              ## ConfigMap containing extra env vars to configure the Mastodon init job
              extraEnvVarsCM: ""
              ## Secret containing extra env vars to configure the Mastodon init job (in case of sensitive data)
              extraEnvVarsSecret: ""
              ## Array of extra volume mounts to be added to the Mastodon Container (evaluated as template). Normally used with `extraVolumes`.
              extraVolumeMounts: []
              ## Container resource requests and limits
              ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
              resources:
                limits: {}
                requests: {}
              ## [object] Add annotations to the job
              annotations:
                helm.sh/hook: post-install, pre-upgrade
                helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
                # This should be executed after the minio provisioning job
                helm.sh/hook-weight: "10"

            ## @section Persistence Parameters (only when S3 is disabled)
            ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
            persistence:
              enabled: false
              ## persistence.mountPath Path to mount the volume at.
              mountPath: /bitnami/mastodon
              ## name of an existing PVC to use for persistence
              existingClaim: ""
              ## Selector to match an existing Persistent Volume for mastodon data PVC
              ## If set, the PVC can't have a PV dynamically provisioned for it
              ## E.g.
              ## selector:
              ##   matchLabels:
              ##     app: my-app
              selector: {}
              ## Custom PVC data source
              dataSource: {}

            ## 'volumePermissions' init container parameters
            ## Changes owner/group of PV mount point to runAsUser:fsGroup values
            ## based on the *podSecurityContext/*containerSecurityContext parameters
            volumePermissions:
              ## OS Shell + Utility image
              ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
              enabled: true

            ## @section External S3 parameters
            externalS3:
              host: ""
              port: 443
              existingSecret: ""
              existingSecretAccessKeyIDKey: "root-user"
              existingSecretKeySecretKey: "root-password"
              protocol: "https"
              bucket: "mastodon"
              region: ""

            ## ref: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
            redis:
              enabled: true
              fullnameOverride: mastodon-redis
              ## Set Redis architecture
              architecture: standalone
              ## Name of a secret containing redis credentials
              existingSecret: "mastodon-redis-credentials"


            ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
            postgresql:
              enabled: true
              auth:
                username: mastodon
                database: mastodon
                existingSecret: "mastodon-pgsql-credentials"
                secretKeys:
                  adminPasswordKey: postgresPassword
                  userPasswordKey: password
              volumePermissions:
                enabled: true
              primary:
                podAnnotations:
                  k8up.io/backupcommand: "sh -c 'PGDATABASE=\"$POSTGRES_DB\" PGUSER=\"$POSTGRES_USER\" PGPASSWORD=\"$POSTGRES_PASSWORD\" pg_dump --clean'"
                  k8up.io/file-extension: .sql
                persistence:
                  enabled: true
                  existingClaim: "mastodon-postgres"

            ## MinIO chart installation to be used as an objstore for Mastodon
            # ref: https://github.com/bitnami/charts/tree/main/bitnami/minio
            minio:
              enabled: true
              fullnameOverride: minio-mastodon
              ## MinIO authentication parameters
              auth:
                ## MinIO root username
                rootUser: admin
                ## Name of an existing secret containing the MinIO credentials
                existingSecret: "mastodon-minio-credentials"

              ## Comma, semi-colon or space separated list of MinIO buckets to create
              defaultBuckets: "s3storage"
              persistence:
                enabled: true
                # Name of an existing PVC to use for minio (only in `standalone` mode)
                existingClaim: "mastodon-minio"
              # Init containers parameters:
              # Enable init container to change owner/group of PV(s) mountpoint to `runAsUser:fsGroup`
              volumePermissions:
                enabled: true

              provisioning:
                ## Enable/disable MinIO provisioning job
                enabled: true
                ## Extra commands to run on MinIO provisioning job:
                #  We need to allow downloads in order for the UI to work
                extraCommands: ["mc anonymous set download provisioning/s3storage"]

              ## Enable/disable MinIO TLS support
              tls:
                enabled: false

            ## @section Elasticsearch chart configuration
            ## https://github.com/bitnami/charts/blob/main/bitnami/elasticsearch/values.yaml
            elasticsearch:
              ## Whether to deploy a elasticsearch server to use as Mastodon's search engine
              ## To use an external server set this to false and configure the externalElasticsearch parameters
              enabled: true
              fullnameOverride: mastodon-elastic-search

            ## @section Apache chart configuration
            ## https://github.com/bitnami/charts/blob/main/bitnami/apache/values.yaml
            apache:
              ## Enable Apache chart
              enabled: true
              fullnameOverride: mastodon-apache
              vhostsConfigMap: "mastodon-apache-mastodon-vhost"
              ingress:
                enabled: true
                hostname: {{ .mastodon_hostname }}
                tls: true
                ingressClassName: nginx
                annotations:
                  cert-manager.io/cluster-issuer: "{{ .global_cluster_issuer }}"
                  # ensure that NGINX's upload size matches Mastodon's
                  nginx.ingress.kubernetes.io/proxy-body-size: 40m
