---
# webapp is deployed 3rd because we need secrets and persistent volumes up first
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: kubevirt-seaweedfs-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_cluster_issuer
              - kubevirt_s3_endpoint
              - kubevirt-hostname
  template:
    metadata:
      name: kubevirt-seaweedfs-app
      annotations:
        argocd.argoproj.io/sync-wave: "2"
    spec:
      project: kubevirt
      destination:
        server: https://kubernetes.default.svc
        namespace: kubevirt
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: 'https://seaweedfs.github.io/seaweedfs/helm'
        targetRevision: 4.0.379
        chart: seaweedfs
        helm:
          releaseName: kubevirt-seaweedfs
          valuesObject:
            global:
              createClusterRole: true
              imageName: chrislusf/seaweedfs
              imagePullPolicy: IfNotPresent
              enableSecurity: false
              securityConfig:
                jwtSigning:
                  volumeWrite: true
                  volumeRead: false
                  filerWrite: false
                  filerRead: false
              serviceAccountName: "kubevirt-seaweedfs"
              certificates:
                alphacrds: false
              monitoring:
                enabled: true
                gatewayHost: null
                gatewayPort: null
              enableReplication: false
              replicationPlacment: "001"
              extraEnvironmentVars:
                WEED_CLUSTER_DEFAULT: "sw"
                WEED_CLUSTER_SW_MASTER: "seaweedfs-master.kubevirt:9333"
                WEED_CLUSTER_SW_FILER: "seaweedfs-filer.kubevirt:8888"

            image:
              registry: ""
              repository: ""

            master:
              enabled: true
              replicas: 1
              port: 9333
              grpcPort: 19333
              metricsPort: 9327
              ipBind: "0.0.0.0"
              loggingOverrideLevel: null
              pulseSeconds: null
              garbageThreshold: null
              metricsIntervalSec: 15
              defaultReplication: "000"
              disableHttp: false
              config: |-
                # Enter any extra configuration for master.toml here.
                # It may be be a multi-line string.
              data:
                type: "emptyDir"
                # claimName: "swfs-master-data"

              logs:
                type: "emptydir"

              topologySpreadConstraints: {}
              tolerations: ""
              nodeSelector: |
                kubernetes.io/arch: amd64

              livenessProbe:
                enabled: true
                httpGet:
                  path: /cluster/status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 1
                failureThreshold: 100
                timeoutSeconds: 10

              readinessProbe:
                enabled: true
                httpGet:
                  path: /cluster/status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 2
                failureThreshold: 100
                timeoutSeconds: 10

              ingress:
                enabled: true
                className: "nginx"
                # host: false for "*" hostname
                host: main.ui.'{{ .kubevirt_endpoint }}'
                annotations:
                  nginx.ingress.kubernetes.io/proxy-body-size: 1G
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                  nginx.ingress.kubernetes.io/backend-protocol: AUTO_HTTP
                  nginx.ingress.kubernetes.io/service-upstream: "true"
                  nginx.ingress.kubernetes.io/rewrite-target: /$1
                  nginx.ingress.kubernetes.io/use-regex: "true"
                  nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
                  nginx.ingress.kubernetes.io/configuration-snippet: |
                    sub_filter '<head>' '<head> <base href="/sw-master/">'; 
                    sub_filter '="/' '="./';
                    sub_filter '=/' '=./';
                    sub_filter '/seaweedfsstatic' './seaweedfsstatic';
                    sub_filter_once off;
                tls:
                  - secretName: kubevirt-seaweedfs-tls
                    hosts:
                      - main.ui.'{{ .kubevirt_endpoint }}'

              extraEnvironmentVars:
                WEED_MASTER_VOLUME_GROWTH_COPY_1: '7'
                WEED_MASTER_VOLUME_GROWTH_COPY_2: '6'
                WEED_MASTER_VOLUME_GROWTH_COPY_3: '3'
                WEED_MASTER_VOLUME_GROWTH_COPY_OTHER: '1'

            volume:
              enabled: true
              port: 8080
              grpcPort: 18080
              metricsPort: 9327
              ipBind: "0.0.0.0"
              replicas: 2
              loggingOverrideLevel: null
              fileSizeLimitMB: null
              minFreeSpacePercent: 7

              dataDirs:
                - name: data0
                  type: "persistentVolumeClaim"
                  storageClass: "local-path"
                  size: "100Gi"
                  maxVolumes: 0

              idx: {}
              logs: {}

              rack: home
              dataCenter: home
              readMode: proxy
              whiteList: null

              extraVolumes: ""
              extraVolumeMounts: ""

              topologySpreadConstraints: {}
              resources: {}
              tolerations: ""

              nodeSelector: |
                kubernetes.io/arch: amd64

              livenessProbe:
                enabled: true
                httpGet:
                  path: /status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 1
                failureThreshold: 100
                timeoutSeconds: 10

              readinessProbe:
                enabled: true
                httpGet:
                  path: /status
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 2
                failureThreshold: 100
                timeoutSeconds: 10

            filer:
              enabled: true
              replicas: 2
              dataCenter: home
              rack: home
              defaultReplicaPlacement: "000"
              maxMB: null
              redirectOnRead: false

              port: 8888
              grpcPort: 18888
              metricsPort: 9327
              encryptVolumeData: false
              filerGroup: ""
              enablePVC: false
              storage: 10Gi

              topologySpreadConstraints: {}
              tolerations: ""
              nodeSelector: |
                kubernetes.io/arch: amd64

              ingress:
                enabled: true
                className: "nginx"
                # host: false for "*" hostname
                host: filer.ui.'{{ .kubevirt_endpoint }}'
                annotations:
                  nginx.ingress.kubernetes.io/proxy-body-size: 1G
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                  nginx.ingress.kubernetes.io/backend-protocol: AUTO_HTTP
                  nginx.ingress.kubernetes.io/service-upstream: "true"
                  nginx.ingress.kubernetes.io/rewrite-target: /$1
                  nginx.ingress.kubernetes.io/use-regex: "true"
                  nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
                  nginx.ingress.kubernetes.io/configuration-snippet: |
                    sub_filter '<head>' '<head> <base href="/sw-filer/">'; #add base url
                    sub_filter '="/' '="./';                               #make absolute paths to relative
                    sub_filter '=/' '=./';
                    sub_filter '/seaweedfsstatic' './seaweedfsstatic';
                    sub_filter_once off;
                tls:
                  - secretName: kubevirt-seaweedfs-filer-tls
                    hosts:
                      - filer.ui.'{{ .kubevirt_endpoint }}'

              extraEnvironmentVars:
                WEED_MYSQL_ENABLED: "false"
                WEED_LEVELDB2_ENABLED: "false"
                WEED_REDIS_CLUSTER3_ENABLED: "true"
                WEED_REDIS_CLUSTER3_ADDRESSES: "valkey.kubevirt.svc.cluster.local:6379"
                WEED_REDIS_CLUSTER3_PASSWORD: "uOEJ1uR04q"
                WEED_FILER_OPTIONS_RECURSIVE_DELETE: "true"
                WEED_FILER_BUCKETS_FOLDER: "/buckets"

              secretExtraEnvironmentVars: {}

              s3:
                enabled: true
                port: 8333
                httpsPort: 0
                allowEmptyFolder: false
                domainName: '{{ .kubevirt_s3_endpoint }}'
                enableAuth: true
                existingConfigSecret: seaweedfs-s3-secret
                createBuckets:
                  - name: kubevirt
                    anonymousRead: false
                  - name: kubevirt-postgres
                    anonymousRead: false


              livenessProbe:
                enabled: true
                httpGet:
                  path: /
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 1
                failureThreshold: 100
                timeoutSeconds: 10

              readinessProbe:
                enabled: true
                httpGet:
                  path: /
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 2
                successThreshold: 2
                failureThreshold: 100
                timeoutSeconds: 10

            s3:
              enabled: false
              ingress:
                enabled: true
                className: "nginx"
                # host: false for "*" hostname
                host: '{{ .kubevirt_s3_endpoint }}'
                # additional ingress annotations for the s3 endpoint
                annotations:
                  nginx.ingress.kubernetes.io/proxy-body-size: 1G
                  cert-manager.io/cluster-issuer: '{{ .global_cluster_issuer }}'
                tls:
                  - secretName: kubevirt-seaweedfs-tls
                    hosts:
                      - '{{ .kubevirt_s3_endpoint }}'
