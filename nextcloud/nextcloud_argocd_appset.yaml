---
# webapp is deployed 2nd because we need secrets and persistent volumes up 1st
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: nextcloud-web-app-set
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - nextcloud_hostname
              - zitadel_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: nextcloud-web-app
    spec:
      project: nextcloud
      destination:
        server: https://kubernetes.default.svc
        namespace: nextcloud
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: 'https://nextcloud.github.io/helm'
        targetRevision: 4.3.6
        chart: nextcloud
        helm:
          valuesObject:
            image:
              flavor: fpm
            ingress:
              enabled: true
              className: nginx
              annotations:
                nginx.ingress.kubernetes.io/proxy-body-size: 10G
                kubernetes.io/tls-acme: "true"
                cert-manager.io/cluster-issuer: {{ .global_cluster_issuer }}
                nginx.ingress.kubernetes.io/enable-cors: "false"
                nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
                nginx.ingress.kubernetes.io/server-snippet: |-
                  proxy_hide_header X-Powered-By;
                  rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
                  rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
                  rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
                  rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;

                  location = /.well-known/carddav {
                    return 301 $scheme://$host/remote.php/dav/;
                  }

                  location = /.well-known/caldav {
                    return 301 $scheme://$host/remote.php/dav/;
                  }
              tls:
                - secretName: nextcloud-tls
                  hosts:
                    - "{{ .nextcloud_hostname }}"
            nextcloud:
              host: {{ .nextcloud_hostname }}
              existingSecret:
                enabled: true
                secretName: nextcloud-admin-credentials
                usernameKey: username
                passwordKey: password
                tokenKey: serverInfoToken
                smtpUsernameKey: smtpUsername
                smtpPasswordKey: smtpPassword
              update: 1
              mail:
                enabled: false
              extraEnv:
                - name: "NC_oidc_login_client_id"
                  valueFrom:
                    secretKeyRef:
                      name: nextcloud-oidc-credentials
                      key: client_id
                - name: "NC_oidc_login_client_secret"
                  valueFrom:
                    secretKeyRef:
                      name: nextcloud-oidc-credentials
                      key: client_secret
              configs:
                logging.config.php: |-
                  <?php
                  $CONFIG = array (
                    'log_type' => 'file',
                    'logfile' => 'nextcloud.log',
                    'loglevel' => 1,
                    'logdateformat' => 'F d, Y H:i:s'
                    );
                video_previews.config.php: |-
                  <?php
                  $CONFIG = array (
                    'enable_previews' => true,
                    'enabledPreviewProviders' => array (
                      'OC\Preview\Movie',
                      'OC\Preview\PNG',
                      'OC\Preview\JPEG',
                      'OC\Preview\GIF',
                      'OC\Preview\BMP',
                      'OC\Preview\XBitmap',
                      'OC\Preview\MP3',
                      'OC\Preview\MP4',
                      'OC\Preview\TXT',
                      'OC\Preview\MarkDown',
                      'OC\Preview\PDF'
                    ),
                  );
                proxy.config.php: |-
                  <?php
                  $CONFIG = array (
                    'trusted_proxies' => array(
                      0 => '127.0.0.1',
                      1 => '10.0.0.0/8'
                    ),
                    'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
                  );
                oidc.config.php: |-
                  <?php
                  $CONFIG = array (
                    // Some Nextcloud options that might make sense here
                    'allow_user_to_change_display_name' => true,
                    'lost_password_link' => 'disabled',

                    // URL of provider. All other URLs are auto-discovered from .well-known
                    'oidc_login_provider_url' => '{{ .zitadel_hostname }}',

                    // Client ID and secret registered with the provider
                    // 'oidc_login_client_id' => 'REPLACE_CLIENT_ID',
                    // 'oidc_login_client_secret' => 'REPLACE_CLIENT_SECRET',

                    // Automatically redirect the login page to the provider
                    'oidc_login_auto_redirect' => false,

                    // Redirect to this page after logging out the user
                    'oidc_login_logout_url' => '{{ .nextcloud_hostname }}',

                    // If set to true the user will be redirected to the
                    // logout endpoint of the OIDC provider after logout
                    // in Nextcloud. After successfull logout the OIDC
                    // provider will redirect back to 'oidc_login_logout_url' (MUST be set).
                    'oidc_login_end_session_redirect' => false,

                    // Login button text
                    'oidc_login_button_text' => 'Log in with ZITADEL',

                    // Hide the NextCloud password change form.
                    'oidc_login_hide_password_form' => false,

                    // Use ID Token instead of UserInfo
                    'oidc_login_use_id_token' => false,

                    // Attribute map for OIDC response. 
                    'oidc_login_attributes' => array (
                        'id' => 'preferred_username',
                        'name' => 'name',
                        'mail' => 'email',
                        'login_filter' => 'groups',
                        'photoURL' => 'picture',
                        'is_admin' => 'nextcloud_admin',
                    ),

                    // Allow only users in configured value(s) to access Nextcloud. In case the user
                    // is not assigned to this value (read from oidc_login_attributes) the login
                    // will not be allowed for this user.
                    //
                    // Must be specified as an array of values (e.g. roles) that are allowed to
                    // access Nextcloud. e.g. 'oidc_login_filter_allowed_values' => array('role1', 'role2')
                    'oidc_login_filter_allowed_values' => array('nextcloud_admins', 'nexcloud_users'),

                    // Set OpenID Connect scope
                    'oidc_login_scope' => 'openid profile email',

                    // Run in LDAP proxy mode
                    // In this mode, instead of creating users of its own, OIDC login
                    // will get the existing user from an LDAP database and only
                    // perform authentication with OIDC. All user data will be derived
                    // from the LDAP database instead of the OIDC user response
                    //
                    // The `id` attribute in `oidc_login_attributes` must return the
                    // "Internal Username" (see expert settings in LDAP integration)
                    'oidc_login_proxy_ldap' => false,

                    // Disable creation of users new to Nextcloud from OIDC login.
                    // A user may be known to the IdP but not (yet) known to Nextcloud.
                    // This setting controls what to do in this case.
                    // - 'true' (default): if the user authenticates to the IdP but is not known to Nextcloud,
                    //     then they will be returned to the login screen and not allowed entry;
                    // - 'false': if the user authenticates but is not yet known to Nextcloud,
                    //     then the user will be automatically created; note that with this setting,
                    //     you will be allowing (or relying on) a third-party (the IdP) to create new users
                    'oidc_login_disable_registration' => false,

                    // Fallback to direct login if login from OIDC fails
                    // Note that no error message will be displayed if enabled
                    'oidc_login_redir_fallback' => false,

                    // If you get your groups from the oidc_login_attributes, you might want
                    // to create them if they are not already existing, Default is `false`.
                    'oidc_create_groups' => false,

                    // Enable use of WebDAV via OIDC bearer token.
                    'oidc_login_webdav_enabled' => false,

                    // Enable authentication with user/password for DAV clients that do not
                    // support token authentication (e.g. DAVx⁵)
                    'oidc_login_password_authentication' => true,

                    // The time in seconds used to cache public keys from provider.
                    // The default value is 1 day.
                    'oidc_login_public_key_caching_time' => 86400,

                    // The time in seconds used to cache the OIDC well-known configuration from the provider.
                    // The default value is 1 day.
                    'oidc_login_well_known_caching_time' => 86400,

                    // If true, nextcloud will download user avatars on login.
                    // This may lead to security issues as the server does not control
                    // which URLs will be requested. Use with care.
                    'oidc_login_update_avatar' => false,

                    // If true, the default Nextcloud proxy won't be used to make internals OIDC call.
                    // The default is false.
                    'oidc_login_skip_proxy' => false,

                    // Code challenge method for PKCE flow.
                    // Possible values are:
                    //	- 'S256'
                    //	- 'plain'
                    // The default value is empty, which won't apply the PKCE flow.
                    'oidc_login_code_challenge_method' => 'S256',
                    );
            nginx:
              enabled: true
            internalDatabase:
              enabled: false
            externalDatabase:
              enabled: true
              type: postgresql
              host: localhost:5432
              user: nextcloud
              database: nextcloud
              existingSecret:
                enabled: true
                secretName: nextcloud-pgsql-credentials
                usernameKey: nextcloudUsername
                passwordKey: nextcloudPassword
            postgresql:
              enabled: true
              # we can't use fullnameOverride till https://github.com/nextcloud/helm/pull/442 is merged
              # fullnameOverride: nextcloud-postgresql
              global:
                postgresql:
                  auth:
                    username: nextcloud
                    database: nextcloud
                    existingSecret: nextcloud-pgsql-credentials
                    secretKeys:
                      userPasswordKey: nextcloudPassword
                      adminPasswordKey: postgresPassword
              volumePermissions:
                enabled: true
              primary:
                podAnnotations:
                  k8up.io/backupcommand: "sh -c 'PGDATABASE=\"$POSTGRES_DB\" PGUSER=\"$POSTGRES_USER\" PGPASSWORD=\"$POSTGRES_PASSWORD\" pg_dump --clean'"
                  k8up.io/file-extension: .sql
                pgHbaConfiguration: |-
                  local all all trust
                  host all all 127.0.0.1/32 md5
                  host all nextcloud 10.0.0.0/8 md5
                initdb:
                  scripts:
                    my_init_script.sql: |
                      ALTER DATABASE nextcloud OWNER TO nextcloud;
                      GRANT ALL PRIVILEGES ON DATABASE nextcloud TO nextcloud;
                      GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO nextcloud;
                persistence:
                  enabled: true
                  existingClaim: "nextcloud-postgresql"
            redis:
              enabled: false
              replica:
                replicaCount: 1
              auth:
                enabled: true
                existingSecret: nextcloud-redis-credentials
                existingSecretPasswordKey: password
            cronjob:
              enabled: true
            service:
              type: ClusterIP
              port: 8080
              loadBalancerIP: nil
              nodePort: nil
            persistence:
              enabled: true
              existingClaim: nextcloud-files
              nextcloudData:
                enabled: false
                subPath:
            livenessProbe:
              enabled: false
              initialDelaySeconds: 45
              periodSeconds: 15
              timeoutSeconds: 5
              failureThreshold: 3
              successThreshold: 1
            readinessProbe:
              enabled: true
              initialDelaySeconds: 45
              periodSeconds: 15
              timeoutSeconds: 5
              failureThreshold: 3
              successThreshold: 1
            startupProbe:
              enabled: false
              initialDelaySeconds: 30
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 30
              successThreshold: 1
            hpa:
              enabled: false
              cputhreshold: 60
              minPods: 1
              maxPods: 10
            metrics:
              enabled: false
              https: true
              token: "enabled"
              timeout: 10s
              podLabels:
                jobLabel: nextcloud-metrics
              service:
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "9205"
                labels:
                  jobLabel: nextcloud-metrics
              serviceMonitor:
                enabled: true
                namespace: "nextcloud"
            rbac:
              enabled: true
