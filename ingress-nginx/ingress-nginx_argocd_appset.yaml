---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: ingress-nginx-helm-appset
  namespace: argocd
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - global_time_zone
  template:
    metadata:
      name: ingress-nginx-helm
    spec:
      project: ingress-nginx
      destination:
        server: 'https://kubernetes.default.svc'
        namespace: ingress-nginx
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: 'https://kubernetes.github.io/ingress-nginx'
        chart: ingress-nginx
        targetRevision: 4.10.1
        helm:
          releaseName: 'ingress-nginx'
          valuesObject:
            controller:
              # note: checkout controller.keda variables in the future
              replicaCount: 2

              config:
                # show real ip in the logs
                enable-real-ip: 'true'
                use-forwarded-headers: 'true'
                proxy-real-ip-cidr: 0.0.0.0/0
                # restrict old versions of tls, could break old browsers/phones
                ssl-protocols: 'TLSv1.3'
                # Enables Online Certificate Status Protocol stapling (OCSP) support.
                enable-ocsp: "true"
                # Enable Modsecurity and the OWASP Core rule set
                enable-modsecurity: "true"
                enable-owasp-modsecurity-crs: "true"
                # Update ModSecurity config and rules
                # modsecurity-snippet: |
                #   # Enable prevention mode. Can be any of: DetectionOnly,On,Off (default is DetectionOnly)
                #   SecRuleEngine On
                #
                #   # Enable scanning of the request body
                #   SecRequestBodyAccess On      # Enable XML and JSON parsing
                #   SecRule REQUEST_HEADERS:Content-Type "(?:application(?:/soap\+|/)|text/)xml" \
                #       "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,\
                #       ctl:requestBodyProcessor=XML"
                #   SecRule REQUEST_HEADERS:Content-Type "application/json" \
                #       "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,\
                #       ctl:requestBodyProcessor=JSON"      # Max request sizes in bytes (with/without files)

                #   # Note NGINX Ingress has its own annotations, keep in sync!
                #   SecRequestBodyLimit 20971520 # 20Mb (default is 12.5Mb)
                #   SecRequestBodyNoFilesLimit 262144 # 250Kb (default is 128Kb)
                #   SecRequestBodyLimitAction Reject # Reject if larger (we could also let it pass with ProcessPartial)      # Update config to include PUT/PATCH/DELETE in the allowed HTTP methods (instead of fully disabling 911100)
                #   SecAction "id:900200,phase:1,nolog,pass,t:none,\
                #     setvar:tx.allowed_methods=GET HEAD POST OPTIONS PUT PATCH DELETE"      # Send ModSecurity audit logs to the stdout (only for rejected requests)
                #   SecAuditLog /dev/stdout
                #   SecAuditLogFormat JSON
                #   SecAuditEngine RelevantOnly # could be On/Off/RelevantOnly

              # we set the timezone on the pod, to make logs easier to read
              extraEnvs:
                - name: TZ
                  value: '{{ .global_time_zone }}'

              # -- This configuration defines if Ingress Controller should allow users to set
              # their own *-snippet annotations, otherwise this is forbidden / dropped
              # when users add those annotations.
              # Global snippets in ConfigMap are still respected
              allowSnippetAnnotations: true

              resources:
                requests:
                  cpu: 100m
                  memory: 90Mi

              service:
                enabled: true
                type: LoadBalancer
                externalTrafficPolicy: 'Local'
                external:
                  enabled: true

              metrics:
                enabled: false
                serviceMonitor:
                  enabled: true
                prometheusRule:
                  enabled: false
