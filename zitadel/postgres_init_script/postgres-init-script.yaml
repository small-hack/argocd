apiVersion: v1
kind: Secret
metadata:
  name: zitadel-postgres-init-script
type: Opaque
stringData:
  init.sql: |
    BEGIN;
    CREATE SCHEMA IF NOT EXISTS eventstore;
    CREATE SCHEMA IF NOT EXISTS projections;
    CREATE SCHEMA IF NOT EXISTS system;
    CREATE TABLE IF NOT EXISTS system.encryption_keys (id TEXT NOT NULL, key TEXT NOT NULL, PRIMARY KEY (id));
    CREATE TABLE IF NOT EXISTS eventstore.events (
        instance_id TEXT NOT NULL
        , aggregate_type TEXT NOT NULL
        , aggregate_id TEXT NOT NULL
        , event_type TEXT NOT NULL
        , "sequence" BIGINT NOT NULL
        , revision SMALLINT NOT NULL
        , created_at TIMESTAMPTZ NOT NULL
        , payload JSONB
        , creator TEXT NOT NULL
        , "owner" TEXT NOT NULL
        , "position" DECIMAL NOT NULL
        , in_tx_order INTEGER NOT NULL
        , PRIMARY KEY (instance_id, aggregate_type, aggregate_id, "sequence"));
    CREATE INDEX IF NOT EXISTS es_active_instances ON eventstore.events (created_at DESC, instance_id);
    CREATE INDEX IF NOT EXISTS es_wm ON eventstore.events (aggregate_id, instance_id, aggregate_type, event_type);
    CREATE INDEX IF NOT EXISTS es_projection ON eventstore.events (
        instance_id
        , aggregate_type
        , event_type
        , "position");
    CREATE SEQUENCE IF NOT EXISTS eventstore.system_seq;
    CREATE TABLE IF NOT EXISTS eventstore.unique_constraints (
        instance_id TEXT
        , unique_type TEXT
        , unique_field TEXT
        , PRIMARY KEY (instance_id, unique_type, unique_field));
    GRANT ALL ON SCHEMA system TO zitadel;
    GRANT ALL ON ALL TABLES IN SCHEMA system TO zitadel;
    GRANT ALL ON SCHEMA eventstore TO zitadel;
    GRANT ALL ON ALL TABLES IN SCHEMA eventstore TO zitadel;
    GRANT ALL ON SCHEMA projections TO zitadel;
    GRANT ALL ON ALL TABLES IN SCHEMA projections TO zitadel;
    COMMIT;
