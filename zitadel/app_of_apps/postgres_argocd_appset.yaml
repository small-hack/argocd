---
# webapp is deployed 2nd because we need secrets and persistent volumes up 1st
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: zitadel-postgres-app-set
  namespace: argocd
spec:
  goTemplate: true
  # generator allows us to source specific values from an external k8s secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - zitadel_s3_endpoint
              - zitadel_s3_bucket
  template:
    metadata:
      name: zitadel-postgres-cluster
      namespace: zitadel
      annotations:
        argocd.argoproj.io/sync-wave: "3"
    spec:
      project: zitadel
      destination:
        server: "https://kubernetes.default.svc"
        namespace: zitadel
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          prune: true
          selfHeal: true
      source:
        repoURL: https://small-hack.github.io/cloudnative-pg-cluster-chart
        chart: cnpg-cluster
        targetRevision: 0.3.9
        helm:
          releaseName: zitadel-postgres-cluster
          values: |
            name: zitadel-postgres
            instances: 1

            bootstrap:
              initdb:
                database: zitadel
                owner: zitadel
                postInitSQL:
                  - CREATE SCHEMA IF NOT EXISTS eventstore
                  - GRANT ALL ON ALL TABLES IN SCHEMA eventstore TO zitadel
                  - CREATE SCHEMA IF NOT EXISTS projections
                  - GRANT ALL ON ALL TABLES IN SCHEMA projections TO zitadel
                  - CREATE SCHEMA IF NOT EXISTS system
                  - GRANT ALL ON ALL TABLES IN SCHEMA system TO zitadel
                  - CREATE TABLE IF NOT EXISTS system.encryption_keys ( id TEXT NOT NULL , key TEXT NOT NULL , PRIMARY KEY (id))
                  - CREATE TABLE IF NOT EXISTS eventstore.events2 ( instance_id TEXT NOT NULL , aggregate_type TEXT NOT NULL , aggregate_id TEXT NOT NULL , event_type TEXT NOT NULL , "sequence" BIGINT NOT NULL , revision SMALLINT NOT NULL , created_at TIMESTAMPTZ NOT NULL , payload JSONB , creator TEXT NOT NULL , "owner" TEXT NOT NULL , "position" DECIMAL NOT NULL , in_tx_order INTEGER NOT NULL , PRIMARY KEY (instance_id, aggregate_type, aggregate_id, "sequence"))
                  - CREATE INDEX IF NOT EXISTS es_active_instances ON eventstore.events2 (created_at DESC, instance_id)
                  - CREATE INDEX IF NOT EXISTS es_wm ON eventstore.events2 (aggregate_id, instance_id, aggregate_type, event_type)
                  - CREATE INDEX IF NOT EXISTS es_projection ON eventstore.events2 (instance_id, aggregate_type, event_type, "position")
                  - CREATE SEQUENCE IF NOT EXISTS eventstore.system_seq
                  - CREATE TABLE IF NOT EXISTS eventstore.unique_constraints ( instance_id TEXT, unique_type TEXT, unique_field TEXT, PRIMARY KEY (instance_id, unique_type, unique_field))
              # postInitApplicationSQLRefs:
              #   configMapRefs:
              #     - name: zitadel-init-sql
              #       key: zitadel-init.sql

            enableSuperuserAccess: false

            backup:
              # barman is a utility for backing up postgres to s3
              barmanObjectStore:
                destinationPath: "s3://{{ .zitadel_s3_bucket }}"
                endpointURL: "https://{{ .zitadel_s3_endpoint }}"
                s3Credentials:
                  accessKeyId:
                    name: zitadel-db-credentials
                    key : "ACCESS_KEY"
                  secretAccessKey:
                    name: zitadel-db-credentials
                    key : "SECRET_KEY"
              retentionPolicy: "30d"
            
            certificates:
              server:
                enabled: true
                generate: true
              client:
                enabled: true
                generate: true
              user:
                enabled: true
                username:
                  - zitadel
                  - postgres

            scheduledBackup:
              name: zitadel-pg-backup
              spec:
                schedule: "0 0 0 * * *" 
                backupOwnerReference: self
                cluster:
                  name: pg-backup

            monitoring:
              enablePodMonitor: false

            postgresql:
              pg_hba: 
                - hostnossl all all 0.0.0.0/0 reject
                - hostssl all all 0.0.0.0/0 cert clientcert=verify-full
