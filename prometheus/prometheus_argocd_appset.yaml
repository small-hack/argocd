# installs whole kube-prometheus-stack which includes grafana and alert manager
---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: prometheus-appset
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  goTemplate: true
  # generator allows us to source specific values from an external secret
  generators:
    - plugin:
        configMapRef:
          name: secret-var-plugin-generator
        input:
          parameters:
            secret_vars:
              - prometheus_hostname
              - prometheus_alert_manager_hostname
              - prometheus_grafana_hostname
              - vouch_hostname
              - global_cluster_issuer
  template:
    metadata:
      name: prometheus-stack-helm-chart
    spec:
      project: prometheus
      syncPolicy:
        syncOptions:
          - ApplyOutOfSyncOnly=true
        automated:
          selfHeal: true
      destination:
        server: https://kubernetes.default.svc
        namespace: prometheus
      source:
        repoURL: https://prometheus-community.github.io/helm-charts
        chart: kube-prometheus-stack
        targetRevision: 55.8.0
        helm:
          values: |
            fullnameOverride: prometheus
            global:
              evaluation_interval: 5s
              scrape_interval: 5s
              scrape_timeout: 10s

            crds:
              enabled: false

            prometheus:
              ingress:
                enabled: true
                ingressClassName: nginx
                annotations:
                  cert-manager.io/cluster-issuer: "{{ .global_cluster_issuer }}"
                  nginx.ingress.kubernetes.io/auth-signin: "https://{{ .vouch_hostname }}/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err"
                  nginx.ingress.kubernetes.io/auth-url: https://{{ .vouch_hostname }}/validate
                  nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User
                  nginx.ingress.kubernetes.io/auth-snippet: |
                    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
                    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
                    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
                    # when VP is hosted externally to k8s ensure the SSL cert is valid to avoid MITM risk
                    proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
                    proxy_ssl_session_reuse on;
                    proxy_ssl_verify_depth 2;
                    proxy_ssl_verify on;
                hosts:
                  - {{ .prometheus_hostname }}
                paths:
                  - /
                tls:
                  - secretName: prometheus-tls
                    hosts:
                    - {{ .prometheus_hostname }}
              prometheusSpec:
                serviceMonitorSelectorNilUsesHelmValues: false
                # additionalScrapeConfigsSecret:
                #   enabled: true
                #   name: additional-scrape-configs
                #   key: scrape-targets.yaml
                storageSpec:
                  volumeClaimTemplate:
                    spec:
                      storageClassName: local-path
                      accessModes: ["ReadWriteOnce"]
                      resources:
                        requests:
                          storage: 32Gi
                retention: 30d
                logLevel: info
              prometheusOperator:
                namespaces:
                  releaseNamespace: true
                  additional:
                    - kube-system
                    - nextcloud
                    - k8up
                    - keycloak
                admissionWebhooks:
                  certManager:
                    enabled: true
                  patch:
                    enabled: false

            alertmanager:
              enabled: true
              annotations: {}
              ingress:
                enabled: true
                ingressClassName: nginx
                annotations:
                  cert-manager.io/cluster-issuer: "{{ .global_cluster_issuer }}"
                  nginx.ingress.kubernetes.io/auth-signin: "https://{{ .vouch_hostname }}/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err"
                  nginx.ingress.kubernetes.io/auth-url: https://{{ .vouch_hostname }}/validate
                  nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User
                  nginx.ingress.kubernetes.io/auth-snippet: |
                    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
                    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
                    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
                hosts:
                  - {{ .prometheus_alert_manager_hostname }}
                paths:
                  - /
                tls:
                  - secretName: alertmanager-tls
                    hosts:
                    - {{ .prometheus_alert_manager_hostname }}

            grafana:
              grafana.ini:
                auth:
                  disable_login_form: false
                  signout_redirect_url: "https://{{ .prometheus_grafana_hostname }}/login/signout"
                auth.proxy:
                  enabled: true
                  header_name: X-Vouch-User
                  header_property: username
                  auto_sign_up: true
                users:
                  allow_sign_up: false
                  auto_assign_org: true
                  auto_assign_org_role: Admin
              ingress:
                enabled: true
                ingressClassName: nginx
                annotations:
                  cert-manager.io/cluster-issuer: "{{ .global_cluster_issuer }}"
                  nginx.ingress.kubernetes.io/auth-signin: "https://{{ .vouch_hostname }}/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err"
                  nginx.ingress.kubernetes.io/auth-url: https://{{ .vouch_hostname }}/validate
                  nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User
                  nginx.ingress.kubernetes.io/auth-snippet: |
                    auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
                    auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
                    auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
                    auth_request_set $user   $upstream_http_x_auth_request_user;
                    auth_request_set $email  $upstream_http_x_auth_request_email;
                    proxy_set_header X-User  $user;
                    proxy_set_header X-Email $email;
                hosts:
                  - {{ .prometheus_grafana_hostname }}
                tls:
                  - secretName: grafana-tls
                    hosts:
                    - {{ .prometheus_grafana_hostname }}

            scrape_configs:
            - job_name: ingress
              honor_timestamps: true
              scrape_interval: 1m
              scrape_timeout: 1m
              metrics_path: /metrics
              scheme: http
